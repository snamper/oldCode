package jinrl_exploit_servlet.simcard;

import java.io.IOException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jinrl_exploit_common.DataConnect;
import jinrl_exploit_common.fc;

public class SelectSimCard extends HttpServlet {

	
	private static Map<String, String> stateMap = new Hashtable<String, String>();

	/**
	 * Constructor of the object.
	 */
	public SelectSimCard() {
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 * 
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		doPost(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 * 
	 * This method is called when a form has its tag value method equals to
	 * post.
	 * 
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String currentUserid = fc.changNull((String)request.getSession().getAttribute("SIMcurrentUserid"));
		if("".equals(currentUserid)){
			currentUserid = fc.getpv(request, "currentUserid");
			request.getSession().setAttribute("SIMcurrentUserid", currentUserid);
		}
		
		DataConnect dc = new DataConnect("AccountPool", false);
		
		
		
		
		List<String> selectList = new ArrayList<String>();
		ResultSet rs = null;
		String sql = "select distinct fDevice from SimUse where fName='"+currentUserid+"' order by fDevice";
		try {
			rs = dc.query(sql);
			while(rs != null && rs.next()){
				selectList.add(fc.getrv(rs, "fDevice", "").toUpperCase());
			}
			dc.CloseResultSet(rs);
//			dc.CloseConnect();
		} catch (Exception e) {
			System.out.println("查询下拉列表失败,"+e.getMessage());
			dc.CloseResultSet(rs);
			dc.CloseConnect();
		}
		
		String defaultDevice = "";
		if(!selectList.isEmpty()){
			defaultDevice = selectList.get(0);
		}
		String getDevice = fc.getpv(request, "rfy_fDevice").trim().toUpperCase();
		if(!"".equals(getDevice)){
			defaultDevice = getDevice;
		}
		

		List<String[]> resultList = new ArrayList<String[]>();
		
		Map<String,String[]> resultMap = new HashMap<String,String[]>();
		
		
		try {
			sql = "select * from SimDBase where fDevice='" + defaultDevice + "'";

			rs = dc.query(sql);

			while (rs != null && rs.next()) {
				String fid = fc.getrv(rs, "fid", "");
				String fState = fc.getrv(rs, "fState", "");
				fState = stateMap.get(fState);
				String fDevice = fc.getrv(rs, "fDevice", "");
				String fComPort = fc.getrv(rs, "fComPort", "");
				String fMoney = fc.getrv(rs, "fMoney", "");//面额
				String fLackMoney = fc.getrv(rs, "fLackMoney", "");//未冲金额
				String[] oneResult = new String[] {fDevice,fComPort,fState,fid,fMoney,fLackMoney};
				resultMap.put(fComPort,oneResult);
			}
			dc.CloseResultSet(rs);
//			dc.CloseConnect();
		} catch (Exception e) {
			System.out.println("SIM卡查询失败," + e.getMessage());
			dc.CloseResultSet(rs);
			dc.CloseConnect();
		}
		
		try {
			sql = "select * from SimDevice where fDevice='"+defaultDevice+"' order by fComPort";
			rs = dc.query(sql);
			while(rs != null && rs.next()){
				String fDevice = fc.getrv(rs, "fDevice", "").toUpperCase();
				String fComPort = fc.getrv(rs, "fComPort", "").toUpperCase();
				String[] oneResult = resultMap.get(fComPort);
				if(oneResult == null){
					oneResult = new String[] {fDevice,fComPort,"正常","","0.00","0.00"};
				}
				resultList.add(oneResult);
			}
			dc.CloseResultSet(rs);
			dc.CloseConnect();
		} catch (Exception e) {
			System.out.println("查询Sim设备失败,"+e.getMessage());
			dc.CloseResultSet(rs);
			dc.CloseConnect();
		}
		

		
			

		request.setAttribute("defaultDevice", defaultDevice);
		request.setAttribute("resultList", resultList);
		request.setAttribute("selectList", selectList);
		request.getRequestDispatcher("/pages/simCard.jsp").forward(request, response);

	}

	/**
	 * Initialization of the servlet. <br>
	 * 
	 * @throws ServletException
	 *             if an error occurs
	 */
	public void init() throws ServletException {
//		0:正常|1:已插卡|2:使用中|3:可疑卡|4:封卡|5:停机|6:余额不足
		stateMap.put("0", "正常");
		stateMap.put("1", "已插卡");
		stateMap.put("2", "使用中");
		stateMap.put("3", "可疑卡");
		stateMap.put("4", "超过限额");
		stateMap.put("5", "停机");
		stateMap.put("6", "余额不足");
	}

}
