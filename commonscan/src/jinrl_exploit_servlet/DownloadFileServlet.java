package jinrl_exploit_servlet;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import jinrl_exploit_IService.IDownloadFileService;
import jinrl_exploit_Po.Tdownloadfile;
import jinrl_exploit_common.GetConfigValue;

public class DownloadFileServlet extends HttpServlet {
	IDownloadFileService downloadFileService;
	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 *
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		this.doPost(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to
	 * post.
	 *
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.setContentType("text/text;charset=gb2312");
		//禁止缓存
		response.setHeader("Pragma","No-Cache");
		response.setHeader("Cache-Control","No-Cache");
		response.setDateHeader("Expires",0);

		synchronized (request) {
//			String currentUserid = request.getParameter("currentUserid");
			String dataid = request.getParameter("dataid");
			Tdownloadfile dlf =  downloadFileService.findById(dataid);
			String filename = dlf.getFfilename();
			Object se = request.getSession().getAttribute(filename);
			if(se != null){
				//文档还未生成完成
				response.getWriter().print("<script>alert('正在生成文件, 请稍后重试！');</script>");
				return;
			}
			BufferedInputStream bis = null;
			BufferedOutputStream bos = null;
			OutputStream fos = null;
			InputStream fis = null;

			// 如果是从服务器上取就用这个获得系统的绝对路径方法。 String filepath =
			// servlet.getServletContext().getRealPath("/" + path);
			String filepath = GetConfigValue.newInstance().filePosition()+filename;
			File uploadFile = new File(filepath);
			fis = new FileInputStream(uploadFile);
			bis = new BufferedInputStream(fis);
			fos = response.getOutputStream();
			bos = new BufferedOutputStream(fos);
			// 这个就是弹出下载对话框的关键代码

			//如果是重命名后上传的，修改文件名称
			String trueFileName = filename;
			if(trueFileName.indexOf("_rename_") != -1){
				int i = trueFileName.indexOf("_rename_");
				trueFileName = trueFileName.substring(i + 8);
			}
			response.setHeader("Content-disposition", "attachment;filename=" + URLEncoder.encode(trueFileName, "utf-8"));

			int bytesRead = 0;
			// 用输入流进行先读，然后用输出流去写，用的是缓冲输入输出流
			byte[] buffer = new byte[8192];
			while ((bytesRead = bis.read(buffer, 0, 8192)) != -1) {
				bos.write(buffer, 0, bytesRead);
			}
			bos.flush();
			fis.close();
			bis.close();
			fos.close();
			bos.close();
			return;
		}

	}

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException
	 *             if an error occurs
	 */
	public void init() throws ServletException {
		ApplicationContext context = new ClassPathXmlApplicationContext(
		"applicationContext.xml");
		downloadFileService = (IDownloadFileService) context.getBean("downloadFileService");
	}

}
