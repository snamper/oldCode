package jinrl_exploit_servlet;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jinrl_exploit_IService.IBusiInfoService;
import jinrl_exploit_Po.TbusiField;
import jinrl_exploit_Po.TbusiInfo;
import jinrl_exploit_common.DataAccess;
import jinrl_exploit_common.DataConnect;
import jinrl_exploit_common.Tools;
import jinrl_exploit_common.fc;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class GraphServlet extends HttpServlet {

	private IBusiInfoService busiInfoService;

	public void setBusiInfoService(IBusiInfoService busiInfoService) {
		this.busiInfoService = busiInfoService;
	}

	/**
	 * Constructor of the object.
	 */
	public GraphServlet() {
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		this.doPost(request, response);
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String busiInfoID = request.getParameter("busiInfoID");

		TbusiInfo busiInfo = busiInfoService.getBusiInfoByfid(busiInfoID);
		

		String pkid = busiInfo.getFprimarykey();
		if (null == pkid || "".equals(pkid)) {
			pkid = "fid";
		}

		String charts = busiInfo.getFcharts();
		String[] cfs = charts.split(":");

		//
		String pictype = "line";
		String pictypes = fc.getpv(request, "pictypes");
		if("".equals(pictypes)){
			pictypes = cfs[0];
		}

		if("柱状图".equals(pictypes)){
			pictype = "column";
		}else
		if("饼状图".equals(pictypes)){
			pictype = "pie";
		}

		String[] chartsFields = cfs[1].split("\\|");
//		String item_type = request.getParameter("item_type");
//		if("1".equals(item_type)){
//			String temp = chartsFields[0];
//			chartsFields[0] = chartsFields[1];
//			chartsFields[1] = temp;
//		}


		Set<TbusiField> set = busiInfo.getTbusiFields();
		
		
		//----------------时间对比start------------------------
		String nighttime = null;
		String nowtime = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		
		//
		List tableListAll = null;
		List picListAll = null;
		List<Map<String,String>> picListAll2 = null;
		List<String> typeListAll = null;
		//
		
		int lineNum = 1;
		long jumpHour = 0l;
		boolean jumpFlag = false;
		if(cfs.length == 4){
			//按时间前推N次,显示多条对比,如(线型图:fhh|faccount|fmoney:5:24)
			jumpFlag = true;
			lineNum = Integer.parseInt(cfs[2]);
			jumpHour = Long.parseLong(cfs[3]);
			
			//如何出现时间对比，那么存放所有
			tableListAll = new ArrayList();
			picListAll = new ArrayList();
			picListAll2 = new ArrayList<Map<String,String>>();
			typeListAll = new ArrayList<String>();
		}
		
		for(int ln = 0; ln < lineNum; ln++){
		//----------------时间对比end------------------------
			
			
		// 得到sql语句
		String sql = busiInfo.getFsqlstring().toLowerCase();
		
		
		// 将Set集合转成List,hbm.xml配置文件中设置set此集合按照forderbynum排序
		List<TbusiField> list = new ArrayList<TbusiField>(set);
		List<TbusiField> listForSelItems = list;
		List<TbusiField> li = new ArrayList<TbusiField>();//存放3个关键字段
		for (int j = 0; j < 3; j++) {
			for (int i = 0; i < list.size(); i++) {
				TbusiField bf = list.get(i);
				if (chartsFields[j].toLowerCase().equals(bf.getFfieldname().toLowerCase())) {
					li.add(bf);
					break;
				}
			}
		}

		list = li;
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);



		//-------------------------接收页面传递过来的查询信息START------------------------------
		StringBuffer addsql = new StringBuffer(" 1=1 ");
		StringBuffer url = new StringBuffer();

				for (int p = 0; p < listForSelItems.size(); p++) {
					TbusiField field = listForSelItems.get(p);
					String s = "";

					// 接收第0和第2种传递过来的参数和值


					/*
					 * request.getMethod().equals("GET")
					 * 检验提交方式，GET/POST
					 * 页面上的查询功能已经全部改为了GET提交方式
					 * 是因为之前两种提交方式处理起来很麻烦
					 * 但页面上的2个隐藏字段必须完好的保留，不能做任何更改，否则会引起找不到方法错误
					 */
					s = fc.getpv(request, "rfy_" + field.getFfieldname());


					if ("".equals(s) || ("选择" + field.getFshowname()).equals(s)) {
						// System.out.println("页面不存在此查询项或查询项里没有输入值或没有选择");
					} else {

						//-----------此部分用于替换值（例如0:接收|1:分发|2:充值|3:通知|4:完成）---------

						boolean flag2=false;//这个是个开关，用来标示这个field是否有替换值
						String s2=""; //如果有替换值，那么在下面的URL里拼接替换的值
						if(null != field.getFchangevalue() && !"".equals(field.getFchangevalue())){
							String[] cvs = null;
							if(field.getFchangevalue().indexOf("SQL:") == 0){
								String sbchangValues = "";
								ResultSet rschangValues = null;
								try{
									rschangValues = dc.query(field.getFchangevalue().substring(4));
									while(rschangValues != null && rschangValues.next()){
										sbchangValues += ("|" + rschangValues.getString(1) + ":" + rschangValues.getString(2));
									}
									sbchangValues = sbchangValues.substring(1);
								}catch(Exception e){
									e.printStackTrace();
								}finally{
//									field.setFchangevalue(sbchangValues);
									cvs = sbchangValues.split("\\|");
									dc.CloseResultSet(rschangValues);
								}
							}else{
								cvs = field.getFchangevalue().split("\\|");
							}

							for(String cv : cvs){
								if(cv.indexOf(s) != -1){
									int  in = cv.indexOf(":");
									if(in != -1){
									String trueValue = cv.substring(0, in);
										if((trueValue+":"+s).equals(cv)){
											s2=s;
											flag2=true;
											s = trueValue;
										}
									}
								}
							}
						}

						//-------------------------------------------------------------

						String sencrypt = s;
						//检验是否加密(将传递过来的查询参数加密)
						if("0".equals(field.getFisencrypt())){
							sencrypt = Tools.EnPassword(s, fc.changNull(field.getFencryptkey()));
						}

						//字段查询方式 ，  =  <>  <=  >=  like%  %like  %like%
						String[] selectType = Tools.getSelectType(field);

						addsql.append(" and " + field.getFfieldname() + " " + selectType[0] + " '" + selectType[1]+sencrypt+selectType[2] + "'");

						/*
						 * (flag2 ? s2 : s)
						 * 加这句话是因为不是所有的字段都有替换值，没有替换值的就使用原来的s就可以了
						 */
						url.append("&rfy_" + field.getFfieldname() + "=" + (flag2 ? s2 : s));
					}

					//接收第三种传递过来的参数和值
					String s3s=null;
					String s3e=null;
					if (request.getMethod().equals("GET")) {
						s3s = fc.getpv(request, field.getFfieldname()+"_start");
						s3e = fc.getpv(request, field.getFfieldname()+"_end");
					}
					if(null!=s3s && !"".equals(s3s) && null!=s3e && !"".equals(s3e)){
						addsql.append(" and " + field.getFfieldname() + " between '" + s3s + "' and '" + s3e + "'");
						url.append("&" +field.getFfieldname()+"_start="+s3s+"&"+field.getFfieldname()+"_end="+s3e);
					} else {
						if (3 == field.getFselectgroup() && "true".equals(field.getFisselectitem())){
							
							Long days = 1l;
							String defaultday = field.getFseldefaultvalue();
							try{
								if(defaultday == null || "".equals(defaultday)) defaultday = "0";
								days = Long.parseLong(defaultday);
							}catch(Exception e){
								days = 0l;
								System.out.println("默认设置的时间天数有误");
							}
							
//							String nowtime = sdf.format(date).substring(0,11)+"23:59:59";
							if(ln == 0){
//								nighttime=sdf.format(date).substring(0,11)+"23:59:59";
								nighttime=sdf.format(date);
								
								//
								Long mi = date.getTime();
								Long jg = new Long(days * 24l * 60 * 60 * 1000);
								Date date2 = new Date(mi - jg);
								nowtime = sdf.format(date2).substring(0,11)+"00:00:00";
								
								if(365 == days){
									nowtime = nowtime.substring(0,8) + "01 00:00:00";
								}
							}else{
								try {
									Date stratTime2 = sdf.parse(nowtime);
									Date endTime2 = sdf.parse(nighttime);
									stratTime2 = new Date(stratTime2.getTime() - jumpHour * 60 * 60 * 1000);
									endTime2 = new Date(endTime2.getTime() - jumpHour * 60 * 60 * 1000);
									nowtime = sdf.format(stratTime2);
									nighttime = sdf.format(endTime2);
								} catch (ParseException e) {
									e.printStackTrace();
								}
							}
							
							addsql.append(" and " + field.getFfieldname() + " between '" + nowtime + "' and '" + nighttime + "'");
//							url.append("&" +field.getFfieldname()+"_start="+nowtime+"&"+field.getFfieldname()+"_end="+nighttime);
							request.setAttribute("defaultDays", days);
						}
					}

				}

				// 接收第1种传递过来的参数和值
				String ots = null;
				String otsValue = null;
				if (request.getMethod().equals("GET")) {
					ots = fc.getpv(request, "yy_oneTypeSel");
					otsValue = fc.getpv(request, "yy_oneTypeInp");
				} else {
//					ots = request.getParameter("yy_oneTypeSel");
					ots = fc.getpv(request, "yy_oneTypeSel");
					if(null==ots){ots="";}
					ots=fc.replace(ots, "'", "''");
					otsValue = request.getParameter("yy_oneTypeInp");
					if(null==otsValue){otsValue="";}
					otsValue=fc.replace(otsValue, "'", "''");
				}

				if (null == ots || "".equals(ots) || "".equals(otsValue)) {
					// System.out.println("页面不存在此查询项或未使用第1种方式的查询项");
				} else {

					if (ots.indexOf("rfy_") == 0) {
						//
						TbusiField field = null;
						for(TbusiField f :listForSelItems){
							if(f.getFfieldname().equals(ots.substring(4))){
								field = f;
							}
						}



						//-----------此部分用于替换值（例如0:接收|1:分发|2:充值|3:通知|4:完成）---------
						boolean flag=false;
						String otsValue2="";
						if(null != field.getFchangevalue() && !"".equals(field.getFchangevalue())){
							String[] cvs = field.getFchangevalue().split("\\|");
							for(String cv : cvs){
								if(cv.indexOf(otsValue) != -1){
									int  in = cv.indexOf(":");
									if(in != -1){
									String trueValue = cv.substring(0, in);
										if((trueValue+":"+otsValue).equals(cv)){
											otsValue2=otsValue;
											flag=true;
											otsValue = trueValue;
										}
									}
								}
							}
						}
						//-------------------------------------------------------------

						String otsValueencrypt = otsValue;
						//检验是否加密(将传递过来的查询参数加密)
						if("0".equals(field.getFisencrypt())){
							otsValueencrypt = Tools.EnPassword(otsValue, fc.changNull(field.getFencryptkey()));
						}

						//字段查询方式 ，  =  <>  <=  >=  like%  %like  %like%
						String[] selectType = Tools.getSelectType(field);
						//
						addsql.append(" and " + ots.substring(4) + " " + selectType[0] + " '" + selectType[1]+otsValueencrypt+selectType[2] + "'");
						url.append("&" + "yy_oneTypeSel=" + ots + "&yy_oneTypeInp=" + (flag ? otsValue2 : otsValue));
					}
				}
				//

				//request.setAttribute("addURL", url);//实际没有用到次URL串，因为没有翻页等功能，而且查询信息也都保存了


		//-------------------------接收页面传递过来的查询信息END------------------------------






				// -----------以下是用于显示4种查询项的START---------------------------
				// 拿出所有的能显示的查询项
				List<TbusiField> selItemlist = new ArrayList<TbusiField>();
				for (int m = 0; m < listForSelItems.size(); m++) {
					TbusiField field = listForSelItems.get(m);
					if (field.getFisselectitem().equals("true")) {
						selItemlist.add(field);
					}
				}
				//
				List zeroTypeSel = new ArrayList();
				List oneTypeSel = new ArrayList();
				List twoTypeSel = new ArrayList();
				//添加日期查询方式
				List threeTypeSel = new ArrayList();
				//
				for (int n = 0; n < selItemlist.size(); n++) {
					TbusiField field = selItemlist.get(n);

					// zeroTypeSel存放查询分组为0的查询项
					if (0 == field.getFselectgroup()) {
						//
						List oneSelect = new ArrayList();
						//
						oneSelect.add(field.getFfieldname());
						oneSelect.add(field.getFshowname());
						//
						String defaultvalue = field.getFseldefaultvalue();
						if (null == defaultvalue) {
							defaultvalue = "";
						}
						//标示是否有两个查询项
						boolean doubleSelfield = false;

						//添加对SQL查询的支持
						if(defaultvalue.indexOf("SQL:") == 0){

							try{
								StringBuffer newchangevalue = new StringBuffer();
								String slectSQL = defaultvalue.substring(4).toLowerCase();
								String selfields = fc.getString(slectSQL, "select", "from");
								if(selfields.indexOf(",") > 0){
									//有替换值的
									doubleSelfield = true;
									ResultSet changers = dc.query(slectSQL);
									if(changers != null){
										while(changers.next()){
											//columnIndex the first column is 1, the second is 2, ...
											String s1 = changers.getString(1);
											String s2 = changers.getString(2);
											//
											newchangevalue.append("|"+s1.trim());
											newchangevalue.append("|"+s2.trim());
										}
										defaultvalue = newchangevalue.substring(1).toString();
									}else{
										defaultvalue = "";
										System.out.println("执行下拉查询，替换的SQL语句出现问题");
									}
									dc.CloseResultSet(changers);
								}else{
									ResultSet changers = dc.query(slectSQL);
									if(changers != null){
										while(changers.next()){
											//columnIndex the first column is 1, the second is 2, ...
											String s1 = changers.getString(1);
											newchangevalue.append("|"+s1.trim());
										}
										defaultvalue = newchangevalue.substring(1).toString();
									}else{
										defaultvalue = "";
										System.out.println("执行下拉查询，替换的SQL语句出现问题");
									}
									dc.CloseResultSet(changers);
								}

							}catch(Exception e){
								defaultvalue = "";
								System.out.println("执行下拉查询，替换的SQL语句出现异常");
							}
						}
						String[] defaults = defaultvalue.split("\\|");
						//
						for (int k = 0; k < defaults.length; k++) {
							oneSelect.add(defaults[k]);
							if(doubleSelfield == false){
								oneSelect.add(defaults[k]);
							}

						}
						zeroTypeSel.add(oneSelect);
					}

					// oneTypeSel存放查询分组为1的查询项
					if (1 == field.getFselectgroup()) {
						String[] options = new String[2];
						options[0] = field.getFfieldname();// 字段名
						options[1] = field.getFshowname();// 显示名
						oneTypeSel.add(options);
					}

					// twoTypeSel存放查询分组为2的查询项
					if (2 == field.getFselectgroup()) {
						String[] inputs = new String[3];
						inputs[0] = field.getFshowname();// 显示名
						inputs[1] = field.getFfieldname();// 字段名

						/*
						 * 查询默认值在页面上已经不再显示了。如果添加将下面这段JSP代码放到
						 * <input name="rfy_<%= inpsel[1]%>"  type="text" class="search_txt" size="12" />
						 * 里面就可以了
						 */
						//<%if(inpsel[2]!=null){ %>value="<%=inpsel[2]%>"<%} %>
						inputs[2] = field.getFseldefaultvalue();// 查询默认值


						twoTypeSel.add(inputs);
					}

					//添加时间查询方式
					if (3 == field.getFselectgroup()){
						String[] inp = new String[2];
						inp[0] = field.getFshowname();
						inp[1] = field.getFfieldname();
						threeTypeSel.add(inp);
					}

				}
				request.setAttribute("zeroTypeSel", zeroTypeSel);
				request.setAttribute("oneTypeSel", oneTypeSel);
				request.setAttribute("twoTypeSel", twoTypeSel);
				//添加时间查询方式
				request.setAttribute("threeTypeSel", threeTypeSel);


				// -----------以下是用于显示4种查询项的-END--------------------------




		//添加查询条件，替换SQL语句中的替换字符
		sql = fc.replace(sql, "{$where$}", addsql.toString());

		DataAccess da = new DataAccess(dc, 10);//这个10没有影响
		// 获得表中记录总数
		int nCount = 0;
		// 根据添加的fquerytype字段，判断使用哪种查询方式。
//		System.out.println("统计图SQL:"+sql);
		nCount = da.query(sql);

		da.nPageRowCount = nCount;

		List<String[]> resultList = new ArrayList<String[]>();
		for (int nRow = 1; nRow <= nCount; nRow++) {
			da.toRow(1, nRow);
			String[] putResult = new String[3];
			for (int i = 0; i < list.size(); i++) {
				TbusiField currentField = list.get(i);
				// 检验是否解密
				if ("0".equals(currentField.getFisencrypt())) {
					putResult[i] = Tools.UnPassword(da.getValue(currentField
							.getFfieldname()), fc.changNull(currentField
							.getFencryptkey()));
				} else {
					putResult[i] = da.getValue(currentField.getFfieldname(),"","0");
				}

				// -----------此部分用于替换值（例如0:接收|1:分发|2:充值|3:通知|4:完成）----页面显示-----
				if (currentField.getFchangevalue() != null
						&& !"".equals(currentField.getFchangevalue())) {
					String changeValue = currentField.getFchangevalue();

					// ------------替换值中使用SQL语句，动态替换---------------------

					if (changeValue.indexOf("SQL:") == 0) {
						StringBuffer newchangevalue = new StringBuffer();
						String changeSQL = changeValue.substring(4);
						ResultSet changers = dc.query(changeSQL);
						if (changers != null) {
							try {
								while (changers.next()) {
									// columnIndex the first column is 1,
									// the second is 2, ...
									String s1 = fc.changNull(changers.getString(1));
									String s2 = fc.changNull(changers.getString(2));
									newchangevalue.append("|" + s1.trim() + ":" + s2.trim());
								}
							} catch (SQLException e) {
								e.printStackTrace();
							}
							changeValue = newchangevalue.substring(1)
									.toString();
						} else {
							changeValue = "";
							System.out.println("执行替换的SQL语句出现问题");
						}
						dc.CloseResultSet(changers);
					}

					// ----------------------------------------------------

					String[] cvs = changeValue.split("\\|");
					for (String s : cvs) {
						if (s.indexOf(putResult[i]) != -1) {
							int a = s.indexOf(":");
							if (a != -1) {
								String ps = s.substring(a + 1);
								// 下面的IF是为了检验数据库中的结构是否正确
								if ((putResult[i] + ":" + ps).equals(s)) {
									putResult[i] = ps;
								}
							}
						}
					}
				}
			}
			// ------------------------------------------------------------------
			resultList.add(putResult);
		}

		da.Close();
		dc.CloseConnect();
		//转换
		List<String> typeList = new ArrayList<String>();
		List<String> itemList = new ArrayList<String>();

		//通过原始值，为X坐标，各线的名字赋值
		setXValueAndTypes(resultList,itemList,typeList);
		
		
		//System.out.println("统计项："+itemList.size());
		//System.out.println("分类："+typeList.size());

		String[][][] results = new String[typeList.size()][itemList.size()][2];

		for(int i = 0; i < resultList.size(); i++){
			String[] s = resultList.get(i);
			int num2 = typeList.indexOf(s[1]);
			int num1 = itemList.indexOf(s[0]);
			results[num2][num1][0] = s[0];
			results[num2][num1][1] = s[2];
		}

		//列表显示
		List tableList = new ArrayList();
		//图中显示的数据，不包含无数据的
		List picList = new ArrayList();
		
		//存map
		List picList2 = new ArrayList();
		
		

		for(int i = 0; i < results.length; i++){
			String[] line = new String[itemList.size()];
			Map<String,String> lineMap = new HashMap<String,String>();
			for(int l = 0; l < line.length; l++){
				line[l] = "-";
			}

			for(int j = 0; j < itemList.size(); j++){
				if(itemList.get(j).equals(results[i][j][0])){
					line[j] = results[i][j][1];
					lineMap.put(itemList.get(j), results[i][j][1]);
				}
			}
			
			picList.add(line);
			picList2.add(lineMap);
			tableList.add(line);
		}
		
		if(ln == 0){
			request.setAttribute("XandY", li);//标题
			request.setAttribute("nCount", nCount);//记录数
			request.setAttribute("pictype", pictype);//线，饼，柱
			request.setAttribute("busiInfo", busiInfo);
			request.setAttribute("itemList", itemList);//X坐标值
			
//			request.setAttribute("chartsFields", chartsFields);
//			request.setAttribute("results", results);
		}
		
		if(lineNum == 1){
			request.setAttribute("tableList", tableList);//table的值
			request.setAttribute("picList", picList);//图的值
			request.setAttribute("typeList", typeList);//每条线的名字
		}else{
			tableListAll.addAll(tableList);
			picListAll.addAll(picList);
			picListAll2.addAll(picList2);
			typeListAll.add(typeList.get(0)+"("+(ln)+")");
		}
		
		}//因为时间对比多出来的for循环，结束
		
		if(jumpFlag){
			request.setAttribute("tableList", tableListAll);//table的值
			request.setAttribute("picList", picListAll);//图的值
			request.setAttribute("typeList", typeListAll);//每条线的名字
			
			//
			List picListAll3 = new ArrayList();
			TreeSet<String> keyAll = getAllKey(picListAll2);
			for(Map<String,String> map : picListAll2){
				Iterator<String> iter = keyAll.iterator();
				//
				String[] line = new String[keyAll.size()];
				for(int l = 0; l < line.length; l++){
					line[l] = "0";
				}
				
				
				//
				for(int i = 0; i < keyAll.size(); i++){
					String value = map.get(iter.next());
					if(value != null && !"".equals(value)){
						line[i] = value;
					}
				}
				
				
				picListAll3.add(line);
			}
			
			request.setAttribute("picList", picListAll3);//图的值
			request.setAttribute("itemList", new ArrayList(keyAll));//X坐标值
		}
		
		
		if("1".equals(request.getParameter("dch"))){
			request.getRequestDispatcher("pages/switchCharts.jsp").forward(request,response);
		}else{
			request.getRequestDispatcher("pages/charts.jsp").forward(request,response);
		}
	}

	
	/**
	 * 
	 * 方法名称: setXValueAndTypes 
	 * 方法描述: 通过原始值，为X坐标，各线的名字赋值
	 * 创建人: renfy
	 * 创建时间: 2011-11-21 下午02:14:37
	 * @param resultList 得到的原始结果
	 * @param itemList 存放X坐标值
	 * @param typeList 各显示线的名称
	 * @version 1.0
	 * 
	 */
	private void setXValueAndTypes(List<String[]> resultList, List<String> itemList, List<String> typeList) {
		
		for(int i = 0; i < resultList.size(); i++){
			String b = resultList.get(i)[0];
			String a = resultList.get(i)[1];

			if(!typeList.contains(a)){
				typeList.add(a);
			}
			if(!itemList.contains(b)){
				itemList.add(b);
			}
		}
		
	}
	
	
	/**
	 * 
	 * 方法名称: getAllKey 
	 * 方法描述: 获得所有的键
	 * 创建人: renfy
	 * 创建时间: 2011-12-6 下午01:40:55
	 * @param list
	 * @return
	 * @version 1.0
	 *
	 */
	private TreeSet<String> getAllKey(List<Map<String,String>> list){
		
		TreeSet<String> setAll = null;
		
		if(list != null && !list.isEmpty()){
			
			setAll = new TreeSet<String>(new Comparator<String>(){
			@Override
			public int compare(String s1, String s2) {
				
				try {
					int num1 = Integer.valueOf(s1);
					int num2 = Integer.valueOf(s2);
					return num1 - num2;
				} catch (Exception e) {
					return s1.compareTo(s2);
				}
				
			}});
			
			for(Map<String,String> map : list){
				Set<String> set = map.keySet();
				setAll.addAll(set);
			}
			
		}
		
		return setAll;
	}
	

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException
	 *             if an error occurs
	 */
	public void init() throws ServletException {
		ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
		busiInfoService = (IBusiInfoService) context.getBean("busiInfoService");
	}

}
