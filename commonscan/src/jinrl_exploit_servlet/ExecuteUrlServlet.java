package jinrl_exploit_servlet;

import java.io.IOException;
import java.net.URLEncoder;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jinrl_exploit_IService.IBusiInfoService;
import jinrl_exploit_IService.IPositionService;
import jinrl_exploit_IService.IUserService;
import jinrl_exploit_Po.TbusiInfo;
import jinrl_exploit_Po.Tposition;
import jinrl_exploit_Po.Tuser;
import jinrl_exploit_common.DataConnect;
import jinrl_exploit_common.Tools;
import jinrl_exploit_common.fc;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ExecuteUrlServlet extends HttpServlet {
	private IBusiInfoService bfService;
	private IUserService userService;
	private IPositionService positionService;
	/**
	 * Constructor of the object.
	 */
	public ExecuteUrlServlet() {
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		this.doPost(request, response);
	}
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String urlnum = request.getParameter("urlnum");
		String dataid = request.getParameter("dataid");
		String currentUserid = request.getParameter("currentUserid");
		String functionid = request.getParameter("functionid");
		String checkloginsign = request.getParameter("checkloginsign");
		//改成传递FID，然后查询对象。否则当打开多个页面的时候对出现错误。
		String busiInfoid = request.getParameter("url12345_fid");
		TbusiInfo busiInfo = bfService.getBusiInfoByfid(busiInfoid);
		String curl = "";
		switch(Integer.parseInt(urlnum)){
		case 1:curl = busiInfo.getUrl1();break;
		case 2:curl = busiInfo.getUrl2();break;
		case 3:curl = busiInfo.getUrl3();break;
		case 4:curl = busiInfo.getUrl4();break;
		case 5:curl = busiInfo.getUrl5();break;
		}
		String[] s = curl.split("\\|");
		
		try {
			Tools.addSyslog(currentUserid, functionid, s[3], "", dataid, true);
		} catch (Exception e) {
			System.out.println("自定义按钮保存日志出错"+e.getMessage());
		}


		//-----发送邮件通知START--------
		String emailNotice = fc.changNull(busiInfo.getFemailnotice());
		if(!emailNotice.equals("") && "0".equals(emailNotice.substring(0, 1))){
		int sport = request.getLocalPort();
		String parameters ="busiInfoID=" + busiInfo.getFid() + "&currentUserid=" + currentUserid + "&dataid=" + dataid;
		String emailNotice_url = "http://localhost:"+sport+"/commonscan/EmailNoticeServlet?" + parameters;
		fc.SendDataViaPost(emailNotice_url, "", "gb2312");
		}
		//-----发送邮件通知END----------

		//------------添加的对SQL语句的处理--------------------
		if(s[4] != null && s[4].indexOf("SQL:") == 0){
			request.setAttribute("sqlstr", s[4].substring(4));
			request.getRequestDispatcher("ExcuteSQL").forward(request, response);
			return;
		}
		//-----------------------------------------------

		//------------添加的对URL语句的处理--------------------
		if(s[4] != null && s[4].indexOf("URL:") == 0){
			request.setAttribute("sqlstr", s[4].substring(4));
			request.getRequestDispatcher("ExcuteURL").forward(request, response);
			return;
		}
		//-----------------------------------------------

		//------------添加的对JS语句的处理--------------------
		if(s[4] != null && s[4].indexOf("JS:") == 0){
			request.setAttribute("sqlstr", s[4].substring(3));
			request.getRequestDispatcher("ExcuteJS").forward(request, response);
			return;
		}
		//-----------------------------------------------

		//
		if(s[4] == null) s[4] = "";
		String switchAllUrl = s[4];


		//替换当前用户
		while(switchAllUrl.indexOf("[user()]") != -1){
			switchAllUrl = fc.replace(switchAllUrl, "[user()]", currentUserid);
		}

		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

		//获得主键名称
		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}
		//获得整行的结果集
//		String qsql ="select "+fc.getString(busiInfo.getFsqlstring(), "select", "from")+" from "+busiInfo.getFtablename()+" where "+pkid+"='"+dataid+"'";
		//----------替换sql中可能含有的当前人员、所属岗位替换START----------------
		StringBuffer mainsql = new StringBuffer(busiInfo.getFsqlstring());
		String orderby = fc.changNull(busiInfo.getForderby());
		if(orderby.toLowerCase().indexOf("group by") != -1){
			mainsql.append(" " + orderby);
		}
		String sq = fc.replace(mainsql.toString(), "[user()]", "'"+currentUserid+"'");
		
		if(sq.indexOf("[position()]") > -1){
			StringBuffer listpName = new StringBuffer();
			Tuser user = userService.getUserById(currentUserid);
			List<Tposition> listp = positionService.getPositionsByuser(user);
			for(Tposition p : listp){
				listpName.append(",'"+p.getFid()+"'");
			}
			sq = fc.replace(sq.toString(), "[position()]", "("+listpName.substring(1).toString()+")");
		}
		
		mainsql = new StringBuffer(sq);
		//----------替换sql中可能含有的当前人员、所属岗位替换OVER----------------
		String qsql = "select * from (" + mainsql +") as RENAME_123QAZ where RENAME_123QAZ." + pkid +"='" + dataid + "'";
		//替换字段
		ResultSet rs = dc.query(qsql);
		try {
			if (rs!=null && rs.next()){
				while(switchAllUrl.indexOf("[") != -1 && switchAllUrl.indexOf("]") != -1){
					String field = fc.getString(switchAllUrl, "[", "]");
					String result = fc.getrv(rs, field, "");
					switchAllUrl = fc.replace(switchAllUrl, "["+field+"]", result);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		dc.CloseResultSet(rs);
		dc.CloseConnect();

		//替换md5
		while(switchAllUrl.indexOf("md5(") != -1){
			String md5yuan = fc.getString(switchAllUrl, "md5(", ")");
			switchAllUrl = fc.replace(switchAllUrl, "md5("+md5yuan+")", fc.getMd5Str(md5yuan));
		}


		String swhitchurl = null;
		if(switchAllUrl.indexOf("?")==-1){
			swhitchurl=switchAllUrl+"?urltype="+s[1]+"&dataid="+dataid+"&currentUserid="+currentUserid+"&currentbusiInfoid="+busiInfoid+"&currentfunctionid="+functionid+"&checkloginsign="+checkloginsign;
		}else{
			swhitchurl=switchAllUrl+"&urltype="+s[1]+"&dataid="+dataid+"&currentUserid="+currentUserid+"&currentbusiInfoid="+busiInfoid+"&currentfunctionid="+functionid+"&checkloginsign="+checkloginsign;
		}

		//----汉字转化(值传递)----
		if(swhitchurl.indexOf("gotoValue") != -1){
			String s1 = swhitchurl.substring(swhitchurl.indexOf("gotoValue=") + 10);
			int a1;
			if(s1.indexOf("&") != -1){
				a1 = s1.indexOf("&");
			}else{
				a1=s1.length();
			}
			s1 = s1.substring(0,a1);
			String s1Encode = URLEncoder.encode(s1,"gb2312");
			swhitchurl = fc.replace(swhitchurl, s1, s1Encode);
		}
		//

		response.sendRedirect(swhitchurl);
	}

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
		bfService = (IBusiInfoService) context.getBean("busiInfoService");
		userService = (IUserService) context.getBean("userService");
		positionService = (IPositionService) context.getBean("positionService");
	}

}
