package jinrl_exploit_servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import jinrl_exploit_IService.IBusiInfoService;
import jinrl_exploit_IService.IPositionService;
import jinrl_exploit_IService.IUserService;
import jinrl_exploit_Po.TbusiInfo;
import jinrl_exploit_Po.Tposition;
import jinrl_exploit_Po.Tuser;
import jinrl_exploit_common.DataConnect;
import jinrl_exploit_common.fc;

public class ExcuteJS extends HttpServlet {

	private IBusiInfoService busiInfoService;
	private IUserService userService;
	private IPositionService positionService;

	public void setBusiInfoService(IBusiInfoService busiInfoService) {
		this.busiInfoService = busiInfoService;
	}
	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 *
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		this.doPost(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 *
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {


		response.setContentType("text/text;charset=gb2312");
		// 禁止缓存
		response.setHeader("Pragma", "No-Cache");
		response.setHeader("Cache-Control", "No-Cache");
		response.setDateHeader("Expires", 0);
		PrintWriter out = response.getWriter();
			String busiInfoid = request.getParameter("busiInfoid");
			String sqlstr = (String) request.getAttribute("sqlstr");
			String dataid = request.getParameter("dataid");
			String currentUserid = request.getParameter("currentUserid");

			// 判断是对一条记录产生影响
			if (dataid == null || "".equals(dataid)) {
				out.print("出现异常,操作失败!");
				return;
			}

			TbusiInfo busiInfo = busiInfoService.getBusiInfoByfid(busiInfoid);

			//替换当前用户
			while(sqlstr.indexOf("[user()]") != -1){
				sqlstr = fc.replace(sqlstr, "[user()]", currentUserid);
			}



			// 连接数据源中所指定的数据库
			DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

			// 获得主键名称
			String pkid = busiInfo.getFprimarykey();
			if (null == pkid || "".equals(pkid)) {
				pkid = "fid";
			}
			// 获得整行的结果集
//			String qsql ="select "+fc.getString(busiInfo.getFsqlstring(), "select", "from")+" from "+busiInfo.getFtablename() + " where " + pkid + "='" + dataid + "'";
			//----------替换sql中可能含有的当前人员、所属岗位替换START----------------
			StringBuffer mainsql = new StringBuffer(busiInfo.getFsqlstring());
			String sq = fc.replace(mainsql.toString(), "[user()]", "'"+currentUserid+"'");
			
			if(sq.indexOf("[position()]") > -1){
				StringBuffer listpName = new StringBuffer();
				Tuser user = userService.getUserById(currentUserid);
				List<Tposition> listp = positionService.getPositionsByuser(user);
				for(Tposition p : listp){
					listpName.append(",'"+p.getFid()+"'");
				}
				sq = fc.replace(sq.toString(), "[position()]", "("+listpName.substring(1).toString()+")");
			}
			
			mainsql = new StringBuffer(sq);
			//----------替换sql中可能含有的当前人员、所属岗位替换OVER----------------
			String qsql = "select * from (" + mainsql +") as RENAME_123QAZ where RENAME_123QAZ." + pkid +"='" + dataid + "'";

			ResultSet rs = dc.query(qsql);
			try {
				if (rs != null && rs.next()) {
					while (sqlstr.indexOf("[") != -1 && sqlstr.indexOf("]") != -1) {
							String field = fc.getString(sqlstr, "[", "]");
							// 固定使用getString可能会出现问题
							String result = rs.getString(field);
							sqlstr = fc.replace(sqlstr, "[" + field + "]", result);

					}
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			//替换md5
			while(sqlstr.indexOf("md5(") != -1){
				String md5yuan = fc.getString(sqlstr, "md5(", ")");
				sqlstr = fc.replace(sqlstr, "md5("+md5yuan+")", fc.getMd5Str(md5yuan));
			}

			//System.out.println("ExcuteJS:"+sqlstr);

			out.print(sqlstr);
			dc.CloseResultSet(rs);
			dc.CloseConnect();
			out.close();
	}

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		busiInfoService = (IBusiInfoService) context.getBean("busiInfoService");
		userService = (IUserService) context.getBean("userService");
		positionService = (IPositionService) context.getBean("positionService");
	}

}
