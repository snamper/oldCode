package jinrl_exploit_CommonDaoImpl;

import java.util.List;

import jinrl_exploit_ICommonDao.ICommonDao;
import jinrl_exploit_common.fc;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class CommonDao implements ICommonDao {

	SessionFactory sessionFactory;
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	/**
	 * 用来向数据库中添加一条数据的方法
	 * @param obj 封装了对应数据库表中字段数据的对象。
	 * @return 布尔值表示是否添加成功
	 */
	public boolean addData(Object obj) {
		try{
			Session session=sessionFactory.getCurrentSession();
			session.saveOrUpdate(obj);
			return true;
		}catch(Exception ex){
			ex.printStackTrace();
			return false;
		}
	}

	/**
	 * 用来删除一条数据的方法
	 * @param obj 封装了对应数据库表中字段数据的对象。
	 * @return 布尔值表示是否添加成功
	 */
	public boolean delData(Object obj) {
		try{
			Session session=sessionFactory.getCurrentSession();
			session.delete(obj);
			return true;
		}catch(Exception ex){
			return false;
		}
	}

	/**
	 * 用来删除数据库中指定数据的方法
	 * @param id 被操作数据库表中的主键ID
	 * @param obj 被操作数据库表对应的实体类
	 * @return 布尔值表示是否删除成功
	 */
	public boolean delData(int id, Class obj) {
		try{
			Session session=sessionFactory.getCurrentSession();
			session.delete(session.get(obj, id));
			return true;
		}catch(Exception ex){
			return false;
		}
	}

	@Override
	public boolean delData(String id, Class obj) {
		try{
			Session session=sessionFactory.getCurrentSession();
			session.delete(session.get(obj, id));
			return true;
		}catch(Exception ex){
			return false;
		}
	}

	/**
	 * 用来根据HQL语句执行增删改的方法。
	 * @param hql 用于执行的增删改的HQL语句
	 * @return 布尔值表示是否执行成功
	 */
	public boolean execute(String hql) {
		boolean ok=false;
		try{
			Session session=sessionFactory.getCurrentSession();
			Query query=session.createQuery(hql);
			int a=query.executeUpdate();
			if(a>0){
				ok=true;
			}
		}catch(Exception ex){
			ex.printStackTrace();
		}
		return ok;
	}


	/**
	 * 用来根据HQL语句执行增删改的方法。
	 * @param hql 用于执行的增删改的HQL语句
	 * @return 布尔值表示是否执行成功
	 */
	public boolean execute(String hql,String property[]) {
		boolean ok=false;
		try{
			Session session=sessionFactory.getCurrentSession();
			Query query=session.createQuery(hql);
			for(int i=0;i<property.length;i++){
				fc.message(property[i]);
				query.setString(i, property[i]);
			}
			int a=query.executeUpdate();
			if(a>0){
				ok=true;
			}
		}catch(Exception ex){
			ex.printStackTrace();
		}
		return ok;
	}

	/**
	 * 根据HQL语句查询数据库中数据并且分页
	 * @param hql 用来查询的HQL语句
	 * @return 封装了数据的集合
	 */
	public List getData(String hql) {
		// TODO Auto-generated method stub
		List list=null;
		try
		{
			Session session=sessionFactory.getCurrentSession();
			Query query=session.createQuery(hql);
			list=query.list();

		}catch(Exception ex){
			ex.printStackTrace();
			System.out.println("查询数据的时候出现错误："+ex.getMessage());
		}
		return list;
	}


	/**
	 * 根据HQL语句和参数查询数据库中数据并且分页
	 * @param hql 用来查询的HQL语句
	 * @return 封装了数据的集合
	 */
	public List getData(String hql,String []property) {
		// TODO Auto-generated method stub
		List list=null;
		try
		{
			Session session=sessionFactory.getCurrentSession();
			Query query=session.createQuery(hql);
			for(int i=0;i<property.length;i++){
				fc.message(property[i]);
				query.setString(i, property[i]);
			}
			list=query.list();
		}catch(Exception ex){
			System.out.println("查询数据的时候出现错误："+ex.getMessage());
		}
		return list;
	}


	/**
	 * 根据ID号和实体类来删除数据库中一条数据的方法
	 * @param id 被操作数据库表中的主键ID
	 * @param obj 被操作数据库表对应的实体类
	 * @return 封装了数据的集合
	 */
	public Object getData(Integer Id, Class objclass) {
		// TODO Auto-generated method stub
		try
		{
			Session session=sessionFactory.getCurrentSession();
			return session.get(objclass,Id);
		}
		catch(Exception ex){
			return null;
		}

	}
	public Object getData(String Id, Class objclass) {
		// TODO Auto-generated method stub
		try
		{
			Session session=sessionFactory.getCurrentSession();
			return session.get(objclass,Id);
		}
		catch(Exception ex){
			return null;
		}

	}
	/**
	 * 根据HQL语句查询数据库中数据并且分页
	 * @param hql 用来查询的HQL语句
	 * @return 封装了数据的集合
	 */
	public List getDataForPage(String hql,int pagesize,int pagenow) {
		Session session=sessionFactory.getCurrentSession();
		Query query=session.createQuery(hql);
		query.setMaxResults(pagesize);
		query.setFirstResult((pagenow-1)*pagesize);
		return query.list();
	}

	/**
	 * 用来更新数据库中数据的方法
	 * @param obj 封装了对应数据库表中字段数据的对象。
	 * @return 布尔值表示是否更新成功
	 */
	public boolean updData(Object obj) {
		try{
			Session session=sessionFactory.getCurrentSession();
			session.saveOrUpdate(obj);
			return true;
		}catch(Exception ex){
			return false;
		}
	}

}
