package jinrl_exploit_action;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jinrl_exploit_IService.IBusiFieldService;
import jinrl_exploit_IService.IBusiInfoService;
import jinrl_exploit_IService.IDownloadFileService;
import jinrl_exploit_IService.IDownloadService;
import jinrl_exploit_IService.IFunctionService;
import jinrl_exploit_IService.IPositionService;
import jinrl_exploit_IService.IPowerManageService;
import jinrl_exploit_IService.IUserService;
import jinrl_exploit_Po.CustomObj;
import jinrl_exploit_Po.TbusiField;
import jinrl_exploit_Po.TbusiInfo;
import jinrl_exploit_Po.Tdownload;
import jinrl_exploit_Po.Tdownloadfile;
import jinrl_exploit_Po.Tposition;
import jinrl_exploit_Po.Tpowermanage;
import jinrl_exploit_Po.Tuser;
import jinrl_exploit_common.DataAccess;
import jinrl_exploit_common.DataConnect;
import jinrl_exploit_common.GetConfigValue;
import jinrl_exploit_common.HandleXmlSample;
import jinrl_exploit_common.Tools;
import jinrl_exploit_common.fc;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import util.BusiInfoUtil;

/**
 * MyEclipse Struts Creation date: 04-16-2010
 *
 * @struts.action
 */
public class BusiInfoAction extends DispatchAction {
	IBusiInfoService busiInfoService;
	IPowerManageService powerManageService;
	IDownloadService downloadService;
	IBusiFieldService busiFieldService;
	IDownloadFileService downloadFileService;
	IUserService userService;
	IPositionService positionService;
	IFunctionService functionService;


	public void setFunctionService(IFunctionService functionService) {
		this.functionService = functionService;
	}


	public void setPositionService(IPositionService positionService) {
		this.positionService = positionService;
	}


	public void setUserService(IUserService userService) {
		this.userService = userService;
	}


	public void setDownloadFileService(IDownloadFileService downloadFileService) {
		this.downloadFileService = downloadFileService;
	}


	public void setBusiFieldService(IBusiFieldService busiFieldService) {
		this.busiFieldService = busiFieldService;
	}


	public void setDownloadService(IDownloadService downloadService) {
		this.downloadService = downloadService;
	}


	public void setPowerManageService(IPowerManageService powerManageService) {
		this.powerManageService = powerManageService;
	}


	public void setBusiInfoService(IBusiInfoService busiInfoService) {
		this.busiInfoService = busiInfoService;
	}


	/**
	 * 用于修改数据
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String datafid = request.getParameter("datafid");
		String busiInfoid = request.getParameter("busiInfoID");
		String currentUserid =request.getParameter("currentUserid");
		String dataidForUpLoad = request.getParameter("dataidForUpLoad");
		String busiInfoForUpLoad = request.getParameter("busiInfoForUpLoad");
		String attachment = request.getParameter("attachment");
		TbusiInfo busiInfo = null;
		StringBuffer beforeUpdateValue = new StringBuffer();//用于保存修改之前的内容
		try {
			// 根据数据源ID获得数据源对象
			busiInfo = busiInfoService.getBusiInfoByfid(busiInfoid);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Set set = busiInfo.getTbusiFields();
		List<TbusiField> list = new ArrayList<TbusiField>(set);

		//get dc , GetPoolConnect(id, pass, dbase){list dclist << dc}

		boolean executeUpdateSQL = true;
		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

		String beforeUpdate = fc.changNull(busiInfo.getBeforeupdate());
		if(!"".equals(beforeUpdate)){
			executeUpdateSQL = Tools.beforeORafterValue(beforeUpdate, request, dc, busiInfo, datafid);
		}


		if(executeUpdateSQL){
		// sql语句例如："update tablename set username='abc', password='123456' where fid='1'";
		// 拼接sql语句
		StringBuffer sql = new StringBuffer();
		sql.append("update " + busiInfo.getFtablename() + " set ");
		for (int i = 0; i < list.size(); i++) {
			TbusiField field = list.get(i);
			String fieldname = field.getFfieldname();
			if(null != request.getParameter(fieldname)){
				if("".equals(request.getParameter(fieldname)) || "@!#$qweM123!@#@!".equals(request.getParameter(fieldname))){
					//防止非字符字段不允许保存空字符串（""）
					sql.append(fieldname + "=NULL,");
				}else{
//						sql.append(fieldname + "='" + request.getParameter(fieldname) + "'" + ",");

						String fieldNameValue = request.getParameter(fieldname);

						//检验是否加密
						if("0".equals(field.getFisencrypt())){
							fieldNameValue = Tools.EnPassword(fieldNameValue, fc.changNull(field.getFencryptkey()));
						}
						
						if("varbinary".equals(field.getFfieldtype())){
							sql.append(fieldname + "=convert(varbinary(64),'"+ fieldNameValue + "'),");
						}else{
							sql.append(fieldname + "='" + fc.replace(fieldNameValue, "'", "''") + "'" + ",");
						}

					}
			}
		}
		sql = new StringBuffer(sql.substring(0, sql.length()-1));
		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}
		sql.append(" where "+pkid+"='" + datafid + "'");
		try {
			//在修改之前，保存修改之前的内容
			beforeUpdateValue.append("|"+pkid+"="+datafid);
			String sqlrs = "select * from "+busiInfo.getFtablename()+" where "+pkid+"='"+datafid+"'";
			ResultSet rsBeVa = dc.query(sqlrs);
			if( rsBeVa != null && rsBeVa.next()){
				for (int i = 0; i < list.size(); i++) {
					String fieldname = list.get(i).getFfieldname();
					if(!fieldname.equals(pkid)){
//						beforeUpdateValue.append("|"+fieldname+"="+rsBeVa.getString(fieldname));
						String s = fc.getrv(rsBeVa, fieldname, "");	//兼容过滤自定义字段
						if (!s.equals(""))	beforeUpdateValue.append("|"+fieldname+"="+s);
					}
				}
			}
			dc.CloseResultSet(rsBeVa);
			//
			int rs = dc.execute(sql.toString());

			if(rs < 1){
				request.setAttribute("updateinformation", 0);//失败
				Tools.addSyslog(currentUserid, request.getParameter("functionid"), "修改:"+busiInfo.getFtitle(), "失败", "");

			}else{
				request.setAttribute("updateinformation", 1);//成功
			}
		} catch (Exception e) {
			e.printStackTrace();
			request.setAttribute("updateinformation", 0);//失败
			Tools.addSyslog(currentUserid, request.getParameter("functionid"), "修改:"+busiInfo.getFtitle(), "失败", "");
		}
		}else{
			request.setAttribute("updateinformation", 0);//失败
			request.setAttribute("updateerrorInfo", "修改前检验失败");
			Tools.addSyslog(currentUserid, request.getParameter("functionid"), "修改:"+busiInfo.getFtitle()+":修改前检验失败", "失败", "");
		}


		//修改完后执行的语句
		String afterUpdate = fc.changNull(busiInfo.getAfterupdate());
		if(executeUpdateSQL && !"".equals(afterUpdate)){
			Tools.beforeORafterValue(afterUpdate, request, dc, busiInfo, datafid);
		}


		try {
			String pkid=busiInfo.getFprimarykey();
			if(null==pkid || "".equals(pkid)){
				pkid="fid";
			}
			String dataidkpid=null;//用于防止主键修改后不能重新显示的问题
			if(request.getParameter(pkid)!=null && (Integer)request.getAttribute("updateinformation") == 1){
				dataidkpid=request.getParameter(pkid);
			}else{
				dataidkpid = datafid;
			}
			if((Integer)request.getAttribute("updateinformation") == 1){

				Tools.addSyslog(currentUserid, request.getParameter("functionid"), "修改:"+busiInfo.getFtitle(), "成功", dataidkpid,beforeUpdateValue.substring(1).toString());

				//-----发送邮件通知START--------
				String emailNotice = fc.changNull(busiInfo.getFemailnotice());
				if(!emailNotice.equals("") && "0".equals(emailNotice.substring(0, 1))){
				int sport = request.getLocalPort();
				String parameters ="busiInfoID=" + busiInfo.getFid() + "&currentUserid=" + currentUserid + "&dataid=" + dataidkpid;
				String emailNotice_url = "http://localhost:"+sport+"/commonscan/EmailNoticeServlet?" + parameters;
				fc.SendDataViaPost(emailNotice_url, "", "gb2312");
				}
				//-----发送邮件通知END----------
			}

			request.getRequestDispatcher("/busiInfo.do?method=showUpdatePage&busiInfoid="+busiInfoid+"&dataid="+dataidkpid+"&currentUserid="+currentUserid+"&panduan=1&dataidForUpLoad="+dataidForUpLoad+"&busiInfoForUpLoad="+busiInfoForUpLoad+"&attachment="+attachment).forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}finally{

			dc.CloseConnect();
		}
		return null;
	}

	/**
	 * 用于显示修改数据页面
	 */
	@SuppressWarnings("unchecked")
	public ActionForward showUpdatePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		  String sMd5 =request.getParameter("currentUserid")
		  	+request.getParameter("functionid")+"H7F65E49JED5OIF4U4DE664C66D6EET3";
		  sMd5 = fc.getMd5Str(sMd5);

		  if(!sMd5.equals(request.getParameter("sign"))){
			  try {
				response.getWriter().print("非法请求，请用合法的方式进入");
			} catch (IOException e) {
				e.printStackTrace();
			}
			  return null;
		  }

		String busiInfoid = request.getParameter("busiInfoid");
		String panduan = request.getParameter("panduan");
		String functionid = request.getParameter("functionid");
		String currentUserid = request.getParameter("currentUserid");
		String checkloginsign = request.getParameter("checkloginsign");
		request.setAttribute("checkloginsign", checkloginsign);
		String datafid = null;
		//当修改完时，请求是从类内部过来的，不是从外部页面，所以此时必须判断好用哪种方式来接收这个数据
		if("1".equals(panduan)){
			datafid = request.getParameter("dataid");
		}else{
			datafid = fc.getpv(request, "dataid");
		}

		TbusiInfo busiInfo = null;
		try {
			// 根据数据源ID获得数据源对象
			busiInfo = busiInfoService.getBusiInfoByfid(busiInfoid);
		} catch (Exception e) {
			e.printStackTrace();
		}

		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}

		Set set = busiInfo.getTbusiFields();
		List<TbusiField> fieldlist = new ArrayList<TbusiField>(set);

		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), true);


//---------------添加自定义按钮显示--------------------

		String url1b="1";
		String url2b="1";
		String url3b="1";
		String url4b="1";
		String url5b="1";
		String attachment = "1";
		String defaultButtenShow = busiInfo.getFdefButtenShow();
		if(defaultButtenShow != null && !"".equals(defaultButtenShow)){
			if(defaultButtenShow.contains("4")) url1b = "0";
			if(defaultButtenShow.contains("5")) url2b = "0";
			if(defaultButtenShow.contains("6")) url3b = "0";
			if(defaultButtenShow.contains("7")) url4b = "0";
			if(defaultButtenShow.contains("8")) url5b = "0";
			if(defaultButtenShow.contains("A")) attachment = "0";
		}
		//获得此用户所有岗位
		Tuser user = userService.getUserById(currentUserid);
		List<Tposition> listp = positionService.getPositionsByuser(user);
		for(Tposition p : listp){
			List<Tpowermanage> pmlist = powerManageService.findpowerManages(p.getFid(), functionid);
			for(Tpowermanage pm : pmlist){
				if("4".equals(pm.getFpower())){
					url1b="0";
				}
				if("5".equals(pm.getFpower())){
					url2b="0";
				}
				if("6".equals(pm.getFpower())){
					url3b="0";
				}
				if("7".equals(pm.getFpower())){
					url4b="0";
				}
				if("8".equals(pm.getFpower())){
					url5b="0";
				}
				if("A".equals(pm.getFpower())){
					attachment="0";
				}

			}
		}
		//


		//附件是否显示
		if("0".equals(busiInfo.getFattachment())){
			busiInfo.setFattachment(attachment);
		}
		//------------以下是现实5个url按钮用到的(按钮显示内容)-----------------
		String url1 = busiInfo.getUrl1();
		if(null==url1 || "".equals(url1)){
			request.setAttribute("url1", "");
		}else{
			String[] s = url1.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url1b)){
				request.setAttribute("url1type", s[1]);
				request.setAttribute("url1alert", s[2]);
				request.setAttribute("url1", s[3]);
			}else{
				request.setAttribute("url1", "");
			}
		}

		String url2 = busiInfo.getUrl2();
		if(null==url2 || "".equals(url2)){
			request.setAttribute("url2", "");
		}else{
			String[] s = url2.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url2b)){
				request.setAttribute("url2type", s[1]);
				request.setAttribute("url2alert", s[2]);
				request.setAttribute("url2", s[3]);
			}else{
				request.setAttribute("url2", "");
			}
		}

		String url3 = busiInfo.getUrl3();
		if(null==url3 || "".equals(url3)){
			request.setAttribute("url3", "");
		}else{
			String[] s = url3.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url3b)){
				request.setAttribute("url3type", s[1]);
				request.setAttribute("url3alert", s[2]);
				request.setAttribute("url3", s[3]);
			}else{
				request.setAttribute("url3", "");
			}
		}

		String url4 = busiInfo.getUrl4();
		if(null==url4 || "".equals(url4)){
			request.setAttribute("url4", "");
		}else{
			String[] s = url4.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url4b)){
				request.setAttribute("url4type", s[1]);
				request.setAttribute("url4alert", s[2]);
				request.setAttribute("url4", s[3]);
			}else{
				request.setAttribute("url4", "");
			}
		}

		String url5 = busiInfo.getUrl5();
		if(null==url5 || "".equals(url5)){
			request.setAttribute("url5", "");
		}else{
			String[] s = url5.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url5b)){
				request.setAttribute("url5type", s[1]);
				request.setAttribute("url5alert", s[2]);
				request.setAttribute("url5", s[3]);
			}else{
				request.setAttribute("url5", "");
			}
		}
		//------------------------------------

		//--------------添加URL1-5的查询部分(按钮是否显示)------------------

		String curl1 = fc.changNull(busiInfo.getFcheackurl1());
		String curl2 = fc.changNull(busiInfo.getFcheackurl2());
		String curl3 = fc.changNull(busiInfo.getFcheackurl3());
		String curl4 = fc.changNull(busiInfo.getFcheackurl4());
		String curl5 = fc.changNull(busiInfo.getFcheackurl5());
		String curl[] = new String[]{curl1,curl2,curl3,curl4,curl5};

		StringBuffer newSelItems = new StringBuffer();
		newSelItems.append("select 1");
		for(int il= 0; il < 5; il++){
			if(!"".equals(curl[il])){
//				newSelItems.append(",(CASE WHEN "+ curl[il] +" THEN 'true' ELSE 'false' END) as URL_" + (il+1));
				if (curl[il].indexOf("NOT:") == 0)
			          newSelItems.append(",(CASE WHEN " + curl[il].substring(4) + " THEN 'false' ELSE 'true' END) as URL_" + (il + 1));
			        else {
			          newSelItems.append(",(CASE WHEN " + curl[il] + " THEN 'true' ELSE 'false' END) as URL_" + (il + 1));
			        }
			}
		}
		newSelItems.append(" from "  + busiInfo.getFtablename() + " where " + pkid + "='" + datafid + "'");
		ResultSet rsrulcheck = dc.query(newSelItems.toString());

		//初始化全为显示。
		String cheackURL1 = "0";
		String cheackURL2 = "0";
		String cheackURL3 = "0";
		String cheackURL4 = "0";
		String cheackURL5 = "0";

		try{
			if( rsrulcheck != null && rsrulcheck.next()){
				//查询SQL语句中添加(CASE WHEN fid != '10' THEN 'true' ELSE 'false' END)
				try{if("false".equals(rsrulcheck.getString("URL_1").toLowerCase())) cheackURL1 = "1";}catch(Exception e){}
				try{if("false".equals(rsrulcheck.getString("URL_2").toLowerCase())) cheackURL2 = "1";}catch(Exception e){}
				try{if("false".equals(rsrulcheck.getString("URL_3").toLowerCase())) cheackURL3 = "1";}catch(Exception e){}
				try{if("false".equals(rsrulcheck.getString("URL_4").toLowerCase())) cheackURL4 = "1";}catch(Exception e){}
				try{if("false".equals(rsrulcheck.getString("URL_5").toLowerCase())) cheackURL5 = "1";}catch(Exception e){}
				//
			}
		}catch(Exception e){

		}
		dc.CloseResultSet(rsrulcheck);
		request.setAttribute("cheackURL1", cheackURL1);
		request.setAttribute("cheackURL2", cheackURL2);
		request.setAttribute("cheackURL3", cheackURL3);
		request.setAttribute("cheackURL4", cheackURL4);
		request.setAttribute("cheackURL5", cheackURL5);
//---------------添加自定义按钮显示OVER--------------------



		//显示前通过修改前SQL语句判断是否可以修改
		boolean executeUpdateSQL = true;
		String beforeUpdate = fc.changNull(busiInfo.getBeforeupdate());
		if(!"".equals(beforeUpdate)){
			 executeUpdateSQL = Tools.beforeORafterValue(beforeUpdate, request, dc, busiInfo, datafid);
		}
		//



//		String sql = "select * from " + busiInfo.getFtablename() + " where "+pkid+"='" + datafid + "'";
		String sql = "select * from (" + busiInfo.getFsqlstring() +") as RENAME_123QAZ where RENAME_123QAZ." + pkid +"='" + datafid + "'";

		//----SQL语句中的替换项------------------
		sql = fc.replace(sql, "[user()]", "'"+currentUserid+"'");
		StringBuffer listpName = new StringBuffer();
		for(Tposition p : listp){
			listpName.append(",'"+p.getFid()+"'");
		}
		sql = fc.replace(sql, "[position()]", "("+listpName.substring(1).toString()+")");

		ResultSet rs = dc.query(sql); //null
		// datalist用于存放新封装的类
		String fpowervalue = "";
		List datalist = new ArrayList();

		//
		if(executeUpdateSQL){
			int sport = request.getLocalPort();
			String sL = "http://localhost:"+sport+"/powermodule/PowerManageServlet?busiInfoid="+busiInfo.getFid()+"&currentUserid="+currentUserid;
			fpowervalue = fc.SendDataViaPost(sL,"","GB2312");
			if(!"".equals(fpowervalue)){
				fpowervalue=fpowervalue.substring(1);
			}
		}


		String[] fieldsdui = fpowervalue.split("\\|");

		int datalistsize = 0;
		for(TbusiField field : fieldlist){
			//---------------对字段的按岗位的控制---------------------

			String fpower=null;
			int jk=0;//用于标示是否有明确的权限控制
			for(String s :fieldsdui){
				String[] dhd = s.split("=");
				if(field.getFid().equals(dhd[0])){
					jk=1;
					if("1".equals(fpower)){
						break;
					}else if("0".equals(fpower) && !"1".equals(dhd[1])){
						//注释掉break;的原因是如果某人员有三个岗位，并且岗位权限分别为0/2/1的权限时，权限会只读
//						break;
					}else{
						fpower=dhd[1];
					}

				}
			}

			//defFieldShow设置;1修改，2隐藏，NULL或0只读
			if(jk==1){
				field.setFdefFieldShow(fpower);
			}
			//将所有字段全部设置为只读
			if(!executeUpdateSQL && "1".equals(field.getFdefFieldShow())){
				field.setFdefFieldShow("0");
			}
			//-------------------------------------------------
			String fisshow = "1";//不显示
			if(!"2".equals(field.getFdefFieldShow())){
				fisshow = "0";//显示
				datalistsize++;
			}

				CustomObj co = null;
				try {
					rs.first();// 将光标定位到数据的第一行
					//显示名字
					String showname = field.getFshowname();
					//字段名字
					String fieldname = field.getFfieldname();
					//值
					String value = "";
					try{
						value = rs.getString(field.getFfieldname());
					}catch(Exception e){
						//当真实表中的字段在映射中不存在，或者查询权限不够时，跳过此字段在详细页面中的显示
						continue;
					}

					if(null == value){value = "";}
					String ffollowcontent = field.getFfollowcontent();

					//检验是否解密
					if("0".equals(field.getFisencrypt())){
						value = Tools.UnPassword(value, fc.changNull(field.getFencryptkey()));
					}

					//是否为只读的
					String readonly = "1".equals(field.getFdefFieldShow()) ? "false" : "true";
					//提示信息
					String suggestInfo = field.getFsuggestinfo();
//					if(null == suggestInfo){suggestInfo = "";}

					/*
					 * 当页面上添加新的信息的时候（Field 中添加新字段），
					 * 都要先在CostomObj类中添加，然后在下面的两个构造函数中添加上
					 */
					if(null == field.getFchangevalue() || "".equals(field.getFchangevalue())){
						//输入框
						Integer size = field.getFinputlength();
						String displaytype = field.getFdisplaytype();
						co = new CustomObj(0, showname, fieldname, value, size, displaytype, readonly,suggestInfo,fisshow,ffollowcontent);
					}else{


						//------------替换值中使用SQL语句，动态替换---------------------
						String changeValue = field.getFchangevalue();
						if(changeValue.indexOf("SQL:") == 0){
							StringBuffer newchangevalue = new StringBuffer();
							String changeSQL = changeValue.substring(4);
							ResultSet changers = dc.query(changeSQL);
							if(changers != null){
								while(changers.next()){
									//columnIndex the first column is 1, the second is 2, ...
									String s1 = fc.changNull(changers.getString(1));
									String s2 = fc.changNull(changers.getString(2));
									newchangevalue.append("|"+s1.trim()+":"+s2.trim());
								}
								changeValue = newchangevalue.substring(1).toString();
								dc.CloseResultSet(changers);
							}else{
								changeValue = "";
								System.out.println("执行替换的SQL语句出现问题");
							}
						}

						//----------------------------------------------------

						//下拉菜单
						Map map = new Hashtable();
						String[] cvs = changeValue.split("\\|");
						for(String cv : cvs){
							int in  = cv.indexOf(":");
							if(in != -1){
								String key = cv.substring(0, in);
								String va = cv.substring(in+1);
								map.put(key, va);
							}
						}
						co = new CustomObj(1, showname, fieldname, value, map, readonly,suggestInfo,fisshow,ffollowcontent);

					}

				} catch (SQLException e) {
					e.printStackTrace();
					dc.CloseResultSet(rs);//关闭连接
					dc.CloseConnect();
				}
				datalist.add(co);
		}
		dc.CloseResultSet(rs);//关闭连接
		dc.CloseConnect();
			request.setAttribute("datalist", datalist);
			request.setAttribute("busiInfo", busiInfo);
			request.setAttribute("datafid", datafid);
			request.setAttribute("datalistsize", datalistsize);
			request.setAttribute("executeUpdateSQL", executeUpdateSQL);
			request.setAttribute("updatediv", request.getParameter("updatediv"));
		return mapping.findForward("showUpdatePage");
	}

	/**
	 * 此方法用于添加数据
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward addData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String busiInfoid = request.getParameter("busiInfoID");
//		request.setAttribute("datascourceId", busiInfoid);// 为添加完数据后，显示继续添加页面准备
		TbusiInfo busiInfo = busiInfoService.getBusiInfoByfid(busiInfoid);
		Set set = busiInfo.getTbusiFields();
		List<TbusiField> list = new ArrayList<TbusiField>(set);
		List<TbusiField> list1 = new ArrayList<TbusiField>();//存储没有自增的
		for(TbusiField bf : list){
			if(!"autoinc".equals(bf.getFfieldtype()) && !"true".equals(bf.getFaddhidden()) && !"1".equals(bf.getFistruefield())){
				list1.add(bf);
			}
		}
		list = list1;

		boolean executeAddSQL = true;
		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}
		//执行保存前的SQL
		String beforeAdd = fc.changNull(busiInfo.getBeforeadd());
		if(!"".equals(beforeAdd)){
			executeAddSQL = Tools.beforeORafterValue(beforeAdd, request, dc, busiInfo, "123*%%$##&12");
		}

		String dataID = request.getParameter(pkid);//用于记录日志

		if(executeAddSQL){
		// 开始拼接sql语句 例如： insert into tablename (id,username,password) values
		// ('1','zhangsan','123456')
		StringBuffer sql = new StringBuffer();
		sql.append("insert into " + busiInfo.getFtablename() + " (");
		for (int i = 0; i < list.size(); i++) {
			if (i == 0) {
				sql.append(list.get(i).getFfieldname());
			} else {
				sql.append("," + list.get(i).getFfieldname());
			}

		}

		sql.append(") values (");

		for (int j = 0; j < list.size(); j++) {
			TbusiField field = list.get(j);
			String value = request.getParameter(field.getFfieldname());
//			String value = fc.getpv(request, field.getFfieldname());

			if(null != value && !"".equals(value)){
				//检验是否加密
				if("0".equals(field.getFisencrypt())){
					value = Tools.EnPassword(value, fc.changNull(field.getFencryptkey()));
				}

				if("varbinary".equals(field.getFfieldtype())){
					sql.append("convert(varbinary(64),'" + value + "'),");
				}else{
					sql.append("'" + value + "',");
				}
			}else{
				sql.append("NULL,");
			}
			


		}
		
		sql = new StringBuffer(sql.substring(0, sql.length()-1));
		sql.append(")");

		// 执行sql语句
		try {
			//替换为空的
			String changesql = fc.replace(sql.toString(), "'@!#$qweM123!@#@!'", "NULL");
			int rs = dc.execute(changesql);
//
//			if(request.getParameter("id") != null){
//				dataID = request.getParameter("id");
//			}
//			if(request.getParameter("fid") != null){
//				dataID = request.getParameter("fid");
//			}

			if(rs < 1){
				request.setAttribute("showInfotrue", 0);//失败
				if(rs == -2){
					request.setAttribute("errorMessage", "插入的主键已经存在");
					Tools.addSyslog(request.getParameter("currentUserid"), request.getParameter("functionid"), "添加:"+busiInfo.getFtitle()+":主键重复", "失败", dataID);
				}
				else{
					request.setAttribute("errorMessage", dc.getError());
					Tools.addSyslog(request.getParameter("currentUserid"), request.getParameter("functionid"), "添加:"+busiInfo.getFtitle()+":"+dc.getError(), "失败", dataID);
				}
			}else{
				request.setAttribute("showInfotrue", 1);//成功
				Tools.addSyslog(request.getParameter("currentUserid"), request.getParameter("functionid"), "添加:"+busiInfo.getFtitle(), "成功", dataID);

				//-----发送邮件通知START--------
				String emailNotice = fc.changNull(busiInfo.getFemailnotice());
				if(!emailNotice.equals("") && "0".equals(emailNotice.substring(0, 1))){
				int sport = request.getLocalPort();
				String parameters ="busiInfoID=" + busiInfo.getFid() + "&currentUserid=" + request.getParameter("currentUserid") + "&dataid=" + request.getParameter(pkid);
				String emailNotice_url = "http://localhost:"+sport+"/commonscan/EmailNoticeServlet?" + parameters;
				fc.SendDataViaPost(emailNotice_url, "", "gb2312");
				}
				//-----发送邮件通知END----------
				

				//执行保存后的SQL
				String afterAdd = fc.changNull(busiInfo.getAfteradd());
				if(executeAddSQL && !"".equals(afterAdd)){
					Tools.beforeORafterValue(afterAdd, request, dc, busiInfo, request.getParameter(pkid));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			request.setAttribute("showInfotrue", 0);
			request.setAttribute("errorMessage", e.getMessage());
			System.out.println("addDataERROR");
		}
		}else{
			request.setAttribute("showInfotrue", 0);
			request.setAttribute("errorMessage", "添加前检验失败");
			Tools.addSyslog(request.getParameter("currentUserid"), request.getParameter("functionid"), "添加:"+busiInfo.getFtitle()+":添加前检验失败", "失败", dataID);
		}

		dc.CloseConnect();

		try {
			request.getRequestDispatcher("busiInfo.do?method=showAddDataPage&tbusiInfoID="+busiInfoid).forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 此方法用在显示添加数据页面
	 */
	@SuppressWarnings("unchecked")
	public ActionForward showAddDataPage(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		  String sMd5 =request.getParameter("currentUserid")
		  	+request.getParameter("functionid")+"H7F65E49JED5OIF4U4DE664C66D6EET3";
		  sMd5 = fc.getMd5Str(sMd5);

		  if(!sMd5.equals(request.getParameter("sign"))){
			  try {
				response.getWriter().print("非法请求，请用合法的方式进入");
			} catch (IOException e) {
				e.printStackTrace();
			}
			  return null;
		  }

		//以下2个值如果有，则是从自定义按钮跳转并传值过来的
		String gotoVaule = fc.changNull(request.getParameter("gotoVaule"));
		String goalField = request.getParameter("goalField");
		//

		String busiInfoID = request.getParameter("tbusiInfoID");
		TbusiInfo busiInfo = null;
		try {
			// 根据数据源ID获得数据源对象
			busiInfo = busiInfoService.getBusiInfoByfid(busiInfoID);
		} catch (Exception e) {
			e.printStackTrace();
		}

		//-----获得主键值(用于显示附件)BEGIN---
		String datafid = "";
		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}

		//-----获得主键值(用于显示附件)OVER-----

		Set set = busiInfo.getTbusiFields();
		List<TbusiField> list = new ArrayList<TbusiField>(set);

		for (int k = 0; k < list.size(); k++) {
			TbusiField field = list.get(k);
			String defaults = field.getFdefaultvalue();
			if (null == defaults) defaults = "";

			//----------------随机不重复的订单号------------[GetOrderID()]--------------
			if (fc.getString(defaults, "[", "]").equals("GetOrderID()")) {
				defaults = fc.replace(defaults, "[GetOrderID()]", fc.GetOrderID(""));
				field.setFdefaultvalue(defaults);
			}


			//--------------当前时间--------------------[GetNowTime()]-------------
			if (fc.getString(defaults, "[", "]").equals("GetNowTime()")) {
				defaults = fc.replace(defaults, "[GetNowTime()]", fc.GetNowTime(""));
				field.setFdefaultvalue(defaults);
			}


			//--------------当前登录人员ID----------------[GetCurrentUser()]------------
			if (fc.getString(defaults, "[", "]").equals("GetCurrentUser()")) {
				defaults = fc.replace(defaults, "[GetCurrentUser()]", request.getParameter("currentUserid"));
				field.setFdefaultvalue(defaults);
			}
			//----------------------------------------------------



			//-----自定义按钮传值过来的，替换掉默认值BEGIN------------
			if(field.getFfieldname().equals(goalField)){
				field.setFdefaultvalue(gotoVaule);
			}
			//-----自定义按钮传值过来的，替换掉默认值OVER------------


			//用于附件显示
			if(pkid.equals(field.getFfieldname()) && "true".equals(field.getFreadonly())){
				datafid = field.getFdefaultvalue();
			}
		}


		//--------------添加对附件是否显示的控制BEGIN---------------
		String attachment = "1";
		String defaultButtenShow = busiInfo.getFdefButtenShow();
		if(defaultButtenShow != null && !"".equals(defaultButtenShow)){
			if(defaultButtenShow.contains("A")) attachment = "0";
		}
		String functionid = request.getParameter("functionid");
		String currentUserid = request.getParameter("currentUserid");
		//获得此用户所有岗位
		Tuser user = userService.getUserById(currentUserid);
		List<Tposition> listp = positionService.getPositionsByuser(user);
		for(Tposition p : listp){
			List<Tpowermanage> pmlist = powerManageService.findpowerManages(p.getFid(), functionid);
			for(Tpowermanage pm : pmlist){
				if("A".equals(pm.getFpower())){
					attachment="0";
				}

			}
		}

		//附件是否显示
		if("0".equals(busiInfo.getFattachment())){
			busiInfo.setFattachment(attachment);
		}

		//--------------添加对附件是否显示的控制OVER--------------

		request.setAttribute("list", list);
		request.setAttribute("busiInfo", busiInfo);
		request.setAttribute("conndatabase", busiInfo.getFconndatabase());
		request.setAttribute("datafid", datafid);
		return mapping.findForward("showAddDataPage");
	}

	/**
	 * 删除数据
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward deleteData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//同时页面也有id传递过来，但此方法使用请求派发方式，所以转到了getBusiInfoid方法中接收此id
		String busiInfoid = request.getParameter("busiInfoid");
		String datafid = fc.getpv(request, "dataid");
		String currentUserid = fc.getpv(request, "currentUserid");
		TbusiInfo busiInfo = null;
		StringBuffer beforeUpdateValue = new StringBuffer();
		try {
			// 根据数据源ID获得数据源对象
			busiInfo = busiInfoService.getBusiInfoByfid(busiInfoid);
		} catch (Exception e) {
			e.printStackTrace();
		}

		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

		boolean executeDelSQL = true;
		String beforeDel = fc.changNull(busiInfo.getBeforedel());
		if(!"".equals(beforeDel)){
			executeDelSQL = Tools.beforeORafterValue(beforeDel, request, dc, busiInfo, datafid);
		}

		//------在删除之前，保存删除之前的内容--------
		Set<TbusiField> set = busiInfo.getTbusiFields();
		List<TbusiField> list = new ArrayList<TbusiField>(set);
		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}
		beforeUpdateValue.append("|"+pkid+"="+datafid);
		String sqlrs = "select * from "+busiInfo.getFtablename()+" where "+pkid+"='"+datafid+"'";
		ResultSet rsBeVa = dc.query(sqlrs);
		try{
			if(rsBeVa != null && rsBeVa.next()){
				for (int i = 0; i < list.size(); i++) {
					String fieldname = list.get(i).getFfieldname();
					if(!fieldname.equals(pkid)){
						beforeUpdateValue.append("|"+fieldname+"="+rsBeVa.getString(fieldname));
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			dc.CloseResultSet(rsBeVa);
		}

		//----------------


		if(executeDelSQL){
			if (busiInfoService.delteData(busiInfo, datafid)) {
				request.setAttribute("deleteInfor", "0");

				Tools.addSyslog(currentUserid, "", "删除:"+busiInfo.getFtitle(), "成功", datafid,beforeUpdateValue.substring(1).toString());

				//-----发送邮件通知START--------
				String emailNotice = fc.changNull(busiInfo.getFemailnotice());
				if(!emailNotice.equals("") && "0".equals(emailNotice.substring(0, 1))){
				int sport = request.getLocalPort();
				String parameters ="busiInfoID=" + busiInfo.getFid() + "&currentUserid=" + currentUserid + "&dataid=" + datafid;
				String emailNotice_url = "http://localhost:"+sport+"/commonscan/EmailNoticeServlet?" + parameters;
				fc.SendDataViaPost(emailNotice_url, "", "gb2312");
				}
				//-----发送邮件通知END----------

			} else {
				request.setAttribute("deleteInfor", "1");
			}
		}else{
			request.setAttribute("deleteInfor", "2");
		}

		String afterDel = fc.changNull(busiInfo.getAfterdel());
		if(executeDelSQL && !"".equals(afterDel)){
			Tools.beforeORafterValue(afterDel, request, dc, busiInfo, datafid);

		}

		dc.CloseConnect();



		try {
			request.getRequestDispatcher("busiInfo.do?method=getBusiInfo&currentUserid="+currentUserid).forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 显示列表
	 *
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getBusiInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();

		String currentUserid = request.getParameter("currUserid");
		if(currentUserid == null || "".equals(currentUserid)){
			currentUserid = request.getParameter("currentUserid");
		}
		session.setAttribute("currentUserid", currentUserid);
		String setPageSize = request.getParameter("pageSize");
		String functionid = request.getParameter("functionid");
		String datascourceId = request.getParameter("tbusiInfoID");

		  String sMd5 =currentUserid + functionid +"H7F65E49JED5OIF4U4DE664C66D6EET3";
		  sMd5 = fc.getMd5Str(sMd5);

		  if(!sMd5.equals(request.getParameter("sign")) || "".equals(currentUserid) || currentUserid == null){
			  try {
				response.getWriter().print(" 非法请求，请用合法的方式进入 ");
			} catch (IOException e) {
				e.printStackTrace();
			}
			  return null;
		  }

		  if(datascourceId == null || "".equals(datascourceId) || "".equals(currentUserid) || currentUserid == null){
			  try {
				response.getWriter().print(" 传递的参数不能为空 ");
			} catch (IOException e) {
				e.printStackTrace();
			}
			  return null;
		  }


		Object[] obj = new Object[30];
		String dataFile = GetConfigValue.newInstance().dataFile();
		String openDataFile = GetConfigValue.newInstance().openDataFile();
		String filePath = dataFile + "/" + currentUserid;
		String fileName = functionid + ".dat";
		String allFilePath = filePath + "/" + fileName;
		String versionFilePath = dataFile + "/" + currentUserid + "/versions.xml";
		boolean fileExists = Tools.checkFileExists(allFilePath);
		boolean versionExists = Tools.checkFileExists(versionFilePath);

		String remote_version = fc.getpv(request, "version");
		request.setAttribute("remote_version", remote_version);

		  //

		Boolean b1 = new Boolean(openDataFile);
		if(b1){

			if(!fileExists){
				if(!Tools.checkFileExists(filePath)){
					Tools.newFolder(filePath);
				}
			} else {
				obj = (Object[])Tools.readFile(allFilePath);

			}
//
			HandleXmlSample handleXml = new HandleXmlSample();
			if(!versionExists){
				 handleXml.createXMLFile(versionFilePath);
			}

			String versionValue = handleXml.getElement(versionFilePath, "ID_"+functionid);

			if(!"".equals(remote_version) && !"default_version".equals(remote_version)){//如果新版本号为空,也不保存

				if(versionValue == null ){
					handleXml.addElement(versionFilePath, "ID_"+functionid, remote_version);
					fileExists = false;
				}else{
					if(!remote_version.equals(versionValue)){
						handleXml.updateElement(versionFilePath, "ID_"+functionid, remote_version);
						fileExists = false;
						Tools.deleteFile(allFilePath);
					}
				}
			}
//



		}else{
			fileExists = false;
		}
		//用于显示总结的时候用到的。
		String newsql="";
		//改

			// 根据数据源ID获得数据源对象
		TbusiInfo busiInfo = null;

		if(fileExists){
			busiInfo = (TbusiInfo)obj[0];
		}else{
			busiInfo = busiInfoService.getBusiInfoByfid(datascourceId);
			try {
				obj[0] = (TbusiInfo)busiInfo.clone();
			} catch (CloneNotSupportedException e) {
				obj[0] = busiInfo;
				e.printStackTrace();
			}
		}

		String setFamountOn = fc.getpv(request, "setFamountOn");
		request.setAttribute("setFamountOn", setFamountOn);
		request.setAttribute("famount_show", busiInfo.getFamount());
		if(!"on".equals(setFamountOn)){
			busiInfo.setFamount(null);
		}

//		Tools.writeFile("e:/test1/busiInfo.dat", busiInfo);
//		busiInfo = (TbusiInfo)Tools.readFile("e:/test1/busiInfo.dat");

//-------------------跳转到图表显示页面START-----------------
		String charts = busiInfo.getFcharts();
		if (charts != null && !"".equals(charts.trim())) {
			try {
				response.sendRedirect("GraphServlet?busiInfoID="+busiInfo.getFid());
				return null;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}




//-------------------跳转到图表显示页面END-------------------
		// 将表头发送到页面显示
		Set<TbusiField> set = busiInfo.getTbusiFields();
		// 将Set集合转成List,hbm.xml配置文件中设置set此集合按照forderbynum排序
		List<TbusiField> list = new ArrayList<TbusiField>(set);
		
		String activeGroupBy = fc.changNull(busiInfo.getFactivegroup()).trim();
		String activeGroupByValue = fc.changNull(busiInfo.getFactivegroupvalue()).trim();
		
		String activegFlag = "false";
		String agValueStr = (activeGroupBy + "|" + activeGroupByValue).toUpperCase();
		if(!"".equals(activeGroupBy) && !"".equals(activeGroupByValue) && !BusiInfoUtil.getActiveGroupField(busiInfo, request).isEmpty()){ 
			activegFlag = "true";
		}
		
		request.setAttribute("agValueStr", agValueStr);
		request.setAttribute("activegFlag", activegFlag);
		
		//listForCheakURL 只用于检测5个URL按钮是否显示。用于查询项
		List<TbusiField> listForSelItems = list;
		// 用li存放符合要求的（将不显示的列移除掉）
		List<TbusiField> li = new ArrayList<TbusiField>();
		for (int i = 0; i < list.size(); i++) {
			TbusiField bf = list.get(i);
			if ("false".equals(bf.getFisdisplay())) {
			}else{
//				if(activegFlag && !(agValueStr.indexOf(bf.getFfieldname().toUpperCase()) > -1)){
//					bf.setFshowname("");
//				}
				li.add(bf);
 
			}
		}
		list = li;
		// 将表头发送到页面显示
		request.setAttribute("list", list);

		String spaceField = fc.changNull(busiInfo.getFspacefield());
		Integer spaceNum = -1;
		request.setAttribute("attachment", busiInfo.getFattachment());

		//-------------以下是添加的对不同角色的权限控制START--------------------

		Tuser user = null;
		if(fileExists){
			user = (Tuser)obj[1];
		}else{
			user = userService.getUserById(currentUserid);
			obj[1] = user;
		}
		//
		String addb="1";
		String updateb="1";//此处设置为0，即设置为默认情况，此按钮可见
		String deleteb="1";
		String detailb="1";
		String url1b="1";
		String url2b="1";
		String url3b="1";
		String url4b="1";
		String url5b="1";
		String downloadb="1";
		String attachment = "1";
		String defaultButtenShow = busiInfo.getFdefButtenShow();
		if(defaultButtenShow != null && !"".equals(defaultButtenShow)){
			if(defaultButtenShow.contains("0")) addb = "0";
			if(defaultButtenShow.contains("1")) updateb = "0";
			if(defaultButtenShow.contains("2")) deleteb = "0";
			if(defaultButtenShow.contains("3")) detailb = "0";
			if(defaultButtenShow.contains("4")) url1b = "0";
			if(defaultButtenShow.contains("5")) url2b = "0";
			if(defaultButtenShow.contains("6")) url3b = "0";
			if(defaultButtenShow.contains("7")) url4b = "0";
			if(defaultButtenShow.contains("8")) url5b = "0";
			if(defaultButtenShow.contains("9")) downloadb = "0";
			if (defaultButtenShow.contains("A")) attachment = "0";
		}
		//用来标示是否为管理员
		Boolean isManager = false;
		//获得此用户所有岗位
		List<Tposition> listp = null;
		if(fileExists){
			listp = (List<Tposition>)obj[2];
		}else{
			listp = positionService.getPositionsByuser(user);
			obj[2] = listp;
		}


		//用于存储列表显示中，是否由弹出层用于更新更新
		//List updateDiv = new ArrayList();
	if(fileExists){
		addb = (String)obj[3];
		updateb = (String)obj[4];
		deleteb = (String)obj[5];
		detailb = (String)obj[6];
		url1b = (String)obj[7];
		url2b = (String)obj[8];
		url3b = (String)obj[9];
		url4b = (String)obj[10];
		url5b = (String)obj[11];
		downloadb = (String)obj[12];
		attachment = (String)obj[13];
		isManager = (Boolean)obj[16];
	}else{

		for(Tposition p : listp){

			if("管理员".equals(p.getFpositionname())){
				isManager = true;
			}
			List<Tpowermanage> pmlist = powerManageService.findpowerManages(p.getFid(), functionid);
			for(Tpowermanage pm : pmlist){
				if("0".equals(pm.getFpower())){
					addb="0";
				}
				if("1".equals(pm.getFpower())){
					updateb="0";
				}
				if("2".equals(pm.getFpower())){
					deleteb="0";
				}
				if("3".equals(pm.getFpower())){
					detailb="0";
				}
				if("4".equals(pm.getFpower())){
					url1b="0";
				}
				if("5".equals(pm.getFpower())){
					url2b="0";
				}
				if("6".equals(pm.getFpower())){
					url3b="0";
				}
				if("7".equals(pm.getFpower())){
					url4b="0";
				}
				if("8".equals(pm.getFpower())){
					url5b="0";
				}
				if("9".equals(pm.getFpower())){
					downloadb="0";
				}
				if ("A".equals(pm.getFpower())) {
			          attachment = "0";
			        }

			}
		}


		obj[3] = addb;
		obj[4] = updateb;
		obj[5] = deleteb;
		obj[6] = detailb;
		obj[7] = url1b;
		obj[8] = url2b;
		obj[9] = url3b;
		obj[10] = url4b;
		obj[11] = url5b;
		obj[12] = downloadb;
		obj[13] = attachment;
		obj[16] = isManager;
	}


		//----多选操作START-----

		String urlButten = fc.changNull(busiInfo.getFurlbutten());

		String u1 = url1b;
		String u2 = url2b;
		String u3 = url3b;
		String u4 = url4b;
		String u5 = url5b;

		if(!urlButten.contains("1")){
			u1="1";
		}
		if(!urlButten.contains("2")){
			u2="1";
		}
		if(!urlButten.contains("3")){
			u3="1";
		}
		if(!urlButten.contains("4")){
			u4="1";
		}
		if(!urlButten.contains("5")){
			u5="1";
		}

		request.setAttribute("check_somes_url1", u1);
		request.setAttribute("check_somes_url2", u2);
		request.setAttribute("check_somes_url3", u3);
		request.setAttribute("check_somes_url4", u4);
		request.setAttribute("check_somes_url5", u5);

		//----多选操作END------

		if("0".equals(busiInfo.getFisadd())){
			busiInfo.setFisadd(addb);
		}
		if("0".equals(busiInfo.getFisdelete())){
			busiInfo.setFisdelete(deleteb);
		}
		if("0".equals(busiInfo.getFisdetail())){
			busiInfo.setFisdetail(detailb);
		}
		if("0".equals(busiInfo.getFisupdate())){
			busiInfo.setFisupdate(updateb);
		}
		if("0".equals(busiInfo.getFisdownload())){
			busiInfo.setFisdownload(downloadb);
		}
		if ("0".equals(busiInfo.getFattachment())) {
		      busiInfo.setFattachment(attachment);
		    }
		//-----------------------------------------------------

		//管理员专用的。
		if(isManager){
			request.setAttribute("isManager", "0");
		}

		//
		request.setAttribute("busiInfo", busiInfo);
		request.setAttribute("url12345_fid", busiInfo.getFid());//用于执行的url1、2、3、4、5时的ExcuteServlet中调用

		//------------以下是现实5个url按钮用到的-----------------
		String url1 = busiInfo.getUrl1();
		if(null==url1 || "".equals(url1)){
			request.setAttribute("url1", "");
		}else{
			String[] s = url1.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url1b)){
				request.setAttribute("url1type", s[1]);
				request.setAttribute("url1alert", s[2]);
				request.setAttribute("url1", s[3]);
			}else{
				request.setAttribute("url1", "");
			}
		}

		String url2 = busiInfo.getUrl2();
		if(null==url2 || "".equals(url2)){
			request.setAttribute("url2", "");
		}else{
			String[] s = url2.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url2b)){
				request.setAttribute("url2type", s[1]);
				request.setAttribute("url2alert", s[2]);
				request.setAttribute("url2", s[3]);
			}else{
				request.setAttribute("url2", "");
			}
		}

		String url3 = busiInfo.getUrl3();
		if(null==url3 || "".equals(url3)){
			request.setAttribute("url3", "");
		}else{
			String[] s = url3.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url3b)){
				request.setAttribute("url3type", s[1]);
				request.setAttribute("url3alert", s[2]);
				request.setAttribute("url3", s[3]);
			}else{
				request.setAttribute("url3", "");
			}
		}

		String url4 = busiInfo.getUrl4();
		if(null==url4 || "".equals(url4)){
			request.setAttribute("url4", "");
		}else{
			String[] s = url4.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url4b)){
				request.setAttribute("url4type", s[1]);
				request.setAttribute("url4alert", s[2]);
				request.setAttribute("url4", s[3]);
			}else{
				request.setAttribute("url4", "");
			}
		}

		String url5 = busiInfo.getUrl5();
		if(null==url5 || "".equals(url5)){
			request.setAttribute("url5", "");
		}else{
			String[] s = url5.split("\\|");
			if(s.length==5 && "0".equals(s[0]) && "0".equals(url5b)){
				request.setAttribute("url5type", s[1]);
				request.setAttribute("url5alert", s[2]);
				request.setAttribute("url5", s[3]);
			}else{
				request.setAttribute("url5", "");
			}
		}
		//------------------------------------
		//-------------以下是添加的对不同角色的权限控制END--------------------




		boolean connType = true;

		if("false".equals(busiInfo.getFconntype()) || "FALSE".equals(busiInfo.getFconntype())){
			connType = false;
		}

		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), connType);
		// 得到sql语句
		StringBuffer sql = new StringBuffer();
		sql.append(busiInfo.getFsqlstring().toLowerCase());

		//----SQL语句中的替换项------------------
		String sq = fc.replace(sql.toString(), "[user()]", "'"+currentUserid+"'");
		StringBuffer listpName = new StringBuffer();
		for(Tposition p : listp){
			listpName.append(",'"+p.getFid()+"'");
		}
		sq = fc.replace(sq.toString(), "[position()]", "("+listpName.substring(1).toString()+")");
		sql = new StringBuffer(sq);

	    String forUpLoad = fc.replace(sql.toString(), "[busiinfoid()]", "'" + request.getParameter("busiInfoForUpLoad") + "'");
	    forUpLoad = fc.replace(forUpLoad, "[dataid()]", "'" + request.getParameter("dataidForUpLoad") + "'");
	    sql = new StringBuffer(forUpLoad);

		//-------------------------


	    boolean selType = false;
	    /*------------------------------------*/
		String pkid=busiInfo.getFprimarykey();
		if(null==pkid || "".equals(pkid)){
			pkid="fid";
		}
	    
	    
	    //添加新的SQL语句替换方式.  0或者空代表原来的SQL,1代表新的SQL替换方式
	    String sqlstrType = fc.changNull(busiInfo.getFsqlstrtype()).trim();
	    // 将查询条件保存进url
		StringBuffer url = new StringBuffer();
	    
	    if("1".equals(sqlstrType)){
	    	
	    	//替换[$fieldname$]标记的内容为fieldname='fieldValue'
	    	while(sql.indexOf("[$") > -1 && sql.indexOf("$]") > -1){
	    		String fieldName = fc.getString(sql.toString(), "[$", "$]");
	    		String fieldValue = "";
	    		for(TbusiField f : set){
	    			if(fieldName.equalsIgnoreCase(f.getFfieldname())){
	    				fieldValue = fc.getpv(request, "rfy_" + f.getFfieldname());
//	    				if(!"".equals(fieldValue)){
//	    					//去拿字段的查询默认替换字段
//	    					String seldefaultvalue = fc.changNull(f.getFseldefaultvalue()).trim();
//	    					int selectgroup = f.getFselectgroup();
//	    					if(selectgroup == 0 && !"".equals(seldefaultvalue)){
//	    						
//	    					}
//	    				}
	    				break;
	    			}
	    		}
	    		
    			if("".equals(fieldValue)){
    				//如果查询默认值也为空，替换为 1=1
    				String newSQL = fc.replace(sql.toString(), "[$" + fieldName + "$]", "1=1");
    				sql = new StringBuffer(newSQL);
    			}else{
    				String newSQL = fc.replace(sql.toString(), "[$" + fieldName + "$]", fieldName + "='" + fieldValue + "'");
    				sql = new StringBuffer(newSQL);
    			}
	    	}
	    	
	    	//替换[#fieldname#]为fieldValue(纯文本替换)
	    	while(sql.indexOf("[#") > -1 && sql.indexOf("#]") > -1){
	    		String fieldName = fc.getString(sql.toString(), "[#", "#]");
	    		String fieldValue = "";
	    		for(TbusiField f : set){
	    			if(fieldName.equalsIgnoreCase(f.getFfieldname())){
	    				fieldValue = fc.getpv(request, "rfy_" + f.getFfieldname());
	    				
	    				//
	    				if("".equals(fieldValue)){
    					//去拿字段的查询默认替换字段
	    					String seldefaultvalue = fc.changNull(f.getFseldefaultvalue()).trim();
	    					int selectgroup = f.getFselectgroup();
	    					if(selectgroup == 2 && !"".equals(seldefaultvalue)){
	    						
	    						if("[GetNowTime2()]".equals(seldefaultvalue)){seldefaultvalue = fc.getTime("yyMMdd");}
	    						
	    						fieldValue = seldefaultvalue;
	    					}
	    				}
	    				//
	    				
	    				break;
	    			}
	    		}
	    		
    			if("".equals(fieldValue)){
    				//如果查询默认值也为空，替换为 1=1
    				String newSQL = fc.replace(sql.toString(), "[#" + fieldName + "#]", "");
    				sql = new StringBuffer(newSQL);
    			}else{
    				String newSQL = fc.replace(sql.toString(), "[#" + fieldName + "#]", fieldValue);
    				sql = new StringBuffer(newSQL);
    			}
	    	url.append("&rfy_" + fieldName + "=" + fieldValue);
	    	}
	    	
	    	request.setAttribute("downloadsql", sql.toString());
	    }
	    else
	    {
	    	
	    
	    /*----------下面添加的是查询功能--------------*/
	    
	    

		// 检验是否包含where
		if (sql.indexOf(" where ") == -1) {
			// 说明里面不包含WHERE关键字
			sql.append(" where 1=1");
		}

		//经过上面的if语句后，sql全都包含了where关键字。为了使where后面可以灵活变化，添加下面的语句
		String endsql = " and "+sql.substring(sql.indexOf(" where ")+7);
		if(endsql.equals(" and 1=1")){
			endsql = "";
		}

		//

		//
		sql = new StringBuffer(sql.substring(0, sql.indexOf(" where ")+7)+" 1=1 ");



		

//-------------------------接收页面传递过来的查询信息START------------------------------

		for (int p = 0; p < listForSelItems.size(); p++) {
			TbusiField field = listForSelItems.get(p);
			String s = "";

			//判断字段所在表的表明，联合查询的时候添加的
			String selfTable = "";
			if(field.getFselfTable() == null || "".equals(field.getFselfTable())){
				selfTable = busiInfo.getFtablename();
			}else{
				selfTable = field.getFselfTable();
			}


			// 接收第0和第2种传递过来的参数和值


			/*
			 * request.getMethod().equals("GET")
			 * 检验提交方式，GET/POST
			 * 页面上的查询功能已经全部改为了GET提交方式
			 * 是因为之前两种提交方式处理起来很麻烦
			 * 但页面上的2个隐藏字段必须完好的保留，不能做任何更改，否则会引起找不到方法错误
			 */
			if (request.getMethod().equals("GET")) {
				s = fc.getpv(request, "rfy_" + field.getFfieldname());
			} else {
				s = request.getParameter("rfy_" + field.getFfieldname());
				if(null==s){s="";}
				s=fc.replace(s, "'", "''");
			}


			if ("".equals(s) || ("选择" + field.getFshowname()).equals(s)) {
				// System.out.println("页面不存在此查询项或查询项里没有输入值或没有选择");
			} else {

				//-----------此部分用于替换值（例如0:接收|1:分发|2:充值|3:通知|4:完成）---------

				boolean flag2=false;//这个是个开关，用来标示这个field是否有替换值
				String s2=""; //如果有替换值，那么在下面的URL里拼接替换的值
				if(null != field.getFchangevalue() && !"".equals(field.getFchangevalue())){
					String[] cvs = null;
					if(field.getFchangevalue().indexOf("SQL:") == 0){
						String sbchangValues = "";
						ResultSet rschangValues = null;
						try{
							rschangValues = dc.query(field.getFchangevalue().substring(4));
							while(rschangValues != null && rschangValues.next()){
								sbchangValues += ("|" + fc.changNull(rschangValues.getString(1)) + ":" + fc.changNull(rschangValues.getString(2)));
							}
							sbchangValues = sbchangValues.substring(1);
						}catch(Exception e){
							e.printStackTrace();
						}finally{
//							field.setFchangevalue(sbchangValues);
							cvs = sbchangValues.split("\\|");
							dc.CloseResultSet(rschangValues);
						}
					}else{
						cvs = field.getFchangevalue().split("\\|");
					}

					for(String cv : cvs){
						if(cv.indexOf(s) != -1){
							int  in = cv.indexOf(":");
							if(in != -1){
							String trueValue = cv.substring(0, in);
								if((trueValue+":"+s).equals(cv)){
									s2=s;
									flag2=true;
									s = trueValue;
								}
							}
						}
					}
				}

				//-------------------------------------------------------------

				String sencrypt = s;
				//检验是否加密(将传递过来的查询参数加密)
				if("0".equals(field.getFisencrypt())){
					sencrypt = Tools.EnPassword(s, fc.changNull(field.getFencryptkey()));
				}

				//字段查询方式 ，  =  <>  <=  >=  like%  %like  %like%
				String[] selectType = Tools.getSelectType(field);

				sql.append(" and " + selfTable + "." + field.getFfieldname() + " " + selectType[0] + " '" + selectType[1]+sencrypt+selectType[2] + "'");

				/*
				 * (flag2 ? s2 : s)
				 * 加这句话是因为不是所有的字段都有替换值，没有替换值的就使用原来的s就可以了
				 */
				url.append("&rfy_" + field.getFfieldname() + "=" + (flag2 ? s2 : s));
			}

			//接收第三种传递过来的参数和值
			String s3s=null;
			String s3e=null;
			if (request.getMethod().equals("GET")) {
				s3s = fc.getpv(request, field.getFfieldname()+"_start");
				s3e = fc.getpv(request, field.getFfieldname()+"_end");
			}
			if(null!=s3s && !"".equals(s3s) && null!=s3e && !"".equals(s3e)){
				sql.append(" and " + selfTable + "."  + field.getFfieldname() + " between '" + s3s + "' and '" + s3e + "'");
				url.append("&" +field.getFfieldname()+"_start="+s3s+"&"+field.getFfieldname()+"_end="+s3e);
			} else {
				if (3 == field.getFselectgroup() && "true".equals(field.getFisselectitem())){
					Date date = new Date();
					Long days = 1l;
					String defaultday = field.getFseldefaultvalue();
					try{
						if(defaultday == null || "".equals(defaultday)) defaultday = "0";
						days = Long.parseLong(defaultday);
					}catch(Exception e){
						days = 0l;
						System.out.println("默认设置的时间天数有误");
					}
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd ");
//					String nowtime = sdf.format(date).substring(0,11)+"23:59:59";
					String nighttime=sdf.format(date)+"23:59:59";
					//
					Long mi = date.getTime();
					Long jg = new Long(days * 24l * 60 * 60 * 1000);
					Date date2 = new Date(mi - jg);
					String nowtime = sdf.format(date2)+"00:00:00";
					sql.append(" and " + selfTable + "."  + field.getFfieldname() + " between '" + nowtime + "' and '" + nighttime + "'");
//					url.append("&" +field.getFfieldname()+"_start="+nowtime+"&"+field.getFfieldname()+"_end="+nighttime);
					request.setAttribute("defaultDays", days);
				}
			}

		}

		// 接收第1种传递过来的参数和值
		String ots = null;
		String otsValue = null;
		if (request.getMethod().equals("GET")) {
			ots = fc.getpv(request, "yy_oneTypeSel");
			otsValue = fc.getpv(request, "yy_oneTypeInp");
		} else {
			ots = request.getParameter("yy_oneTypeSel");
			if(null==ots){ots="";}
			ots=fc.replace(ots, "'", "''");
			otsValue = request.getParameter("yy_oneTypeInp");
			if(null==otsValue){otsValue="";}
			otsValue=fc.replace(otsValue, "'", "''");
		}

		if (null == ots || "".equals(ots) || "".equals(otsValue)) {
			// System.out.println("页面不存在此查询项或未使用第1种方式的查询项");
		} else {

			if (ots.indexOf("rfy_") == 0) {
				//
				TbusiField field = null;
				for(TbusiField f :listForSelItems){
					if(f.getFfieldname().equals(ots.substring(4))){
						field = f;
					}
				}



				//-----------此部分用于替换值（例如0:接收|1:分发|2:充值|3:通知|4:完成）---------
				boolean flag=false;
				String otsValue2="";
				if(null != field.getFchangevalue() && !"".equals(field.getFchangevalue())){
					String[] cvs = field.getFchangevalue().split("\\|");
					for(String cv : cvs){
						if(cv.indexOf(otsValue) != -1){
							int  in = cv.indexOf(":");
							if(in != -1){
							String trueValue = cv.substring(0, in);
								if((trueValue+":"+otsValue).equals(cv)){
									otsValue2=otsValue;
									flag=true;
									otsValue = trueValue;
								}
							}
						}
					}
				}
				//-------------------------------------------------------------

				//判断字段所在表的表明，联合查询的时候添加的
				String selfTable = "";
				if(field.getFselfTable() == null || "".equals(field.getFselfTable())){
					selfTable = busiInfo.getFtablename();
				}else{
					selfTable = field.getFselfTable();
				}

				String otsValueencrypt = otsValue;
				//检验是否加密(将传递过来的查询参数加密)
				if("0".equals(field.getFisencrypt())){
					otsValueencrypt = Tools.EnPassword(otsValue, fc.changNull(field.getFencryptkey()));
				}

				//字段查询方式 ，  =  <>  <=  >=  like%  %like  %like%
				String[] selectType = Tools.getSelectType(field);
				//
				sql.append(" and " + selfTable + "."  + ots.substring(4) + " " + selectType[0] + " '" + selectType[1]+otsValueencrypt+selectType[2] + "'");
				url.append("&" + "yy_oneTypeSel=" + ots + "&yy_oneTypeInp=" + (flag ? otsValue2 : otsValue));
			}
		}

		//添加where后面截掉的部分
		sql.append(endsql);
		//

		//添加order by
		String orderby = busiInfo.getForderby();
		if(null!=orderby && !"".equals(orderby)){
			if((orderby.toLowerCase().indexOf("order by") == -1)&&(orderby.toLowerCase().indexOf("group by") == -1) )
				sql.append(" order by "+orderby);
			else
				sql.append(" " + orderby);
		}


		newsql = sql.toString();
		request.setAttribute("downloadsql", sql.toString());
		


//-------------------------接收页面传递过来的查询信息END------------------------------


		

		//--------------添加URL1-5的查询部分(按钮是否显示)------------------

		String curl1 = fc.changNull(busiInfo.getFcheackurl1());
		String curl2 = fc.changNull(busiInfo.getFcheackurl2());
		String curl3 = fc.changNull(busiInfo.getFcheackurl3());
		String curl4 = fc.changNull(busiInfo.getFcheackurl4());
		String curl5 = fc.changNull(busiInfo.getFcheackurl5());
		String curl[] = new String[]{curl1,curl2,curl3,curl4,curl5};
		//原来的查询项
		String selectitems = fc.getString(sql.toString().toUpperCase(), "SELECT", "FROM");
		//存放新的查询项
		StringBuffer newSelItems = new StringBuffer();
		newSelItems.append(selectitems);
		for(int il= 0; il < 5; il++){
			if(!"".equals(curl[il])){
//				newSelItems.append(",(CASE WHEN "+ curl[il] +" THEN 'true' ELSE 'false' END) as URL_" + (il+1));
				if (curl[il].indexOf("NOT:") == 0)
			          newSelItems.append(",(CASE WHEN " + curl[il].substring(4) + " THEN 'false' ELSE 'true' END) as URL_" + (il + 1));
			        else {
			          newSelItems.append(",(CASE WHEN " + curl[il] + " THEN 'true' ELSE 'false' END) as URL_" + (il + 1));
			        }
			}
		}


			//-----添加变色行显示的SQL语句------

			String changeColorShow = fc.changNull(busiInfo.getFchangeColor());
			if(!"".equals(changeColorShow)){
				newSelItems.append(",(" + changeColorShow + ") as CHANGECOLOR_SHOW");
			}
			//--------------------------
//		sql = new StringBuffer(fc.replace(sql.toString().toUpperCase(), selectitems, newSelItems.toString()));
		int ti = sql.toString().toUpperCase().indexOf("SELECT" + selectitems + "FROM") + ("SELECT" + selectitems + "FROM").length();
		sql = new StringBuffer("SELECT " + newSelItems + " FROM " + sql.toString().toUpperCase().substring(ti));

		//-------------------------------------------------------

	    //-----------访问servlet---------------

		  if(busiInfo.getFchangeServlet() != null && !"".equals(busiInfo.getFchangeServlet()) && "1".equals(request.getParameter("selcetclick"))){
				  //busiInfo.getFchangeServlet()?clientid=[rfy_客户id]//ga213
				try {
					String s  = busiInfo.getFchangeServlet();
						String name = fc.getString(s, "{$", "$}");
//						System.out.println("name:"+name);
						while(!"".equals(name)){
							String v = fc.getpv(request, name);
							v = URLEncoder.encode(v);
							s = fc.replace(s, "{$"+name+"$}",v);
							name = fc.getString(s, "{$", "$}");
						}
					int sport = request.getLocalPort();
					String sUrl = "http://localhost:"+sport+s+"&busiInfoid="+datascourceId;
					//System.out.println("访问servlet"+sUrl);
					fc.SendDataViaPost(sUrl,"","GB2312");
				} catch (Exception e) {
					e.printStackTrace();
				}
		  }

		//--------------------------------------


		//指定是快速查询,还是完全查询,默认使用快速查询
		String selTypes = fc.getpv(request, "selType_on");
		
		/*默认完全查询修改为快速查询   2011-10-08*/
		if(!"1".equals(request.getParameter("quickSelcet"))){
			selTypes = "on";
		}
		
		request.setAttribute("selType_on", selTypes);
		
		if("on".equals(selTypes)){
			selType = true;
		}
		if(null != busiInfo.getFselecttype() && "0".equals(busiInfo.getFselecttype().trim())){
			selType = true;
		}
		
		
		
		//判断是否是自定义group by 方式，是：修改sql
		sql = BusiInfoUtil.activeGroupBy(sql, busiInfo,request);
		
		//替换“*”为具体的查询字段
		sql = BusiInfoUtil.replaceStar(sql, list, pkid);
		
	    }
	    
	    if("true".equals(activegFlag)){
	    	request.setAttribute("downloadsql", sql.toString());
	    }
	    
	    request.setAttribute("addURL", url);
		
//		fc.message("显示页面的SQL:"+sql);
//		System.out.println("显示页面的SQL:"+sql);
		
		// 初始化所用信息
		int pagesize = 15;// 每页显示的数量 注意：修改每页数量时， 还需要修改return 上面的数字。代码:request.setAttribute("startRowNum", (currentpage - 1) * 15);
		Integer busiInfoPageSize = busiInfo.getFpagesize();
		if(setPageSize != null && !"".equals(setPageSize)){
			busiInfoPageSize = Integer.valueOf(setPageSize);
		}
		if(busiInfoPageSize != null){
			pagesize = busiInfoPageSize;
			if(busiInfoPageSize == 0){
				pagesize = 15;
			}
		}
		Integer currentpage = 1;// 当前页号
		// ResultSet封装在了里面
		DataAccess da = new DataAccess(dc, pagesize);
		// 获得表中记录总数
		int nCount = 0;
		
		//根据添加的fquerytype字段，判断使用哪种查询方式。
		if(busiInfo.getFquerytype()==null || "".equals(busiInfo.getFquerytype()) || "0".equals(busiInfo.getFquerytype()) || "1".equals(sqlstrType)){
			nCount = da.query(sql.toString(),false,"",selType);
		}else if("1".equals(busiInfo.getFquerytype())){
			//使用二次 查询
			nCount = da.query(sql.toString(), true, pkid,selType);
		}
		request.setAttribute("nCountNUM", nCount);

		boolean isFastSel = false;
		if(selType && nCount >= pagesize * 20){//是否大于快速查询数
			isFastSel = true;
		}
		request.setAttribute("isFastSel", isFastSel);
		// 获得要显示的页号
		String pageno = request.getParameter("pageno");
		if (null == pageno || "".equals(pageno)) {
			currentpage = 1;
		} else {
			try {
				currentpage = Integer.parseInt(pageno);
			} catch (Exception e) {
				currentpage = 1;
			}
		}

		// 保持页数不会小于1
		if (currentpage < 1) {
			currentpage = 1;
		}

		// 计算总页数
		int pageCountNum = 0;
		if (nCount == 0) {
			pageCountNum = 0;
		} else if (nCount % pagesize == 0) {
			pageCountNum = nCount / pagesize;
		} else {
			pageCountNum = nCount / pagesize + 1;
		}
		// 保持页数不会大于总页数
		if (currentpage > pageCountNum) {
			currentpage = pageCountNum;
		}


		/*
		 * datalist用于存放真正的页面显示的数据，其中存放的字符串数组， 将每一条记录的散信息全都放到此字符串数组中
		 * 有多少个数组就有多少行记录
		 */
		List datalist = new ArrayList();
		try {

			// 当最后一页时，将pagesize设置成剩余的条数
			if (currentpage.equals(pageCountNum)) {
				pagesize = nCount - pagesize * (pageCountNum - 1);
			}
			//
			String v1 = "", v2 = "", v3="", v4="", v5="";
			StringBuffer newchangevalue1 = null, newchangevalue2 = null, newchangevalue3 = null, newchangevalue4 = null, newchangevalue5 = null;
			//
			for (int nRow = 1; (nRow <= pagesize) && (nRow <= nCount); nRow++) {
				da.toRow(currentpage, nRow);
				// 第一个1存放的是单前行显示的颜色，5 存放的 是5个URL的是否显示（0显示，1不显示）,第二个1存放的是删除按钮是否显示（0显示，1不显示）,数组中的最后一个1存放的是ID，
				int nChangeValue = 0;
				String[] putResult = new String[list.size() + 1 + 5 + 1 + 1];
				for (int i = 0; i < list.size(); i++) {
					TbusiField currentField = list.get(i);
					if(!"".equals(spaceField) && spaceNum == -1 && currentField.getFfieldname().equals(spaceField)){
						spaceNum = i;
					}
					//检验是否解密
					if("0".equals(currentField.getFisencrypt())){
						putResult[i] = Tools.UnPassword(da.getValue(currentField.getFfieldname()), fc.changNull(currentField.getFencryptkey()));
					}else{
						putResult[i] = da.getValue(currentField.getFfieldname());
					}
					//-----------此部分用于替换值（例如0:接收|1:分发|2:充值|3:通知|4:完成）----页面显示-----
					if(currentField.getFchangevalue()!=null && !"".equals(currentField.getFchangevalue())){
						String changeValueSQL = currentField.getFchangevalue();
						//String changeValueOld = changeValueSQL;

						//------------替换值中使用SQL语句，动态替换---------------------

						String changeValue = null;
						if(changeValueSQL.indexOf("SQL:") == 0){
							nChangeValue ++;
							//StringBuffer newchangevalue = new StringBuffer();
							//读取
							if(fileExists)
								changeValue = (String)obj[16 + nChangeValue];
							//
							if (changeValue==null){
								//如果是查询过的,就直接用,不再查库
								StringBuffer newchangevalue = null;
								if (changeValueSQL.equals(v1)) newchangevalue = newchangevalue1;
								if (changeValueSQL.equals(v2)) newchangevalue = newchangevalue2;
								if (changeValueSQL.equals(v3)) newchangevalue = newchangevalue3;
								if (changeValueSQL.equals(v4)) newchangevalue = newchangevalue4;
								if (changeValueSQL.equals(v5)) newchangevalue = newchangevalue5;
								if (newchangevalue==null){
									//查询
									newchangevalue = new StringBuffer();
									String changeSQL = changeValueSQL.substring(4);
									ResultSet changers = dc.query(changeSQL);
									if(changers != null){
										while(changers.next()){
											//columnIndex the first column is 1, the second is 2, ...
											String s1 = fc.changNull(changers.getString(1));
											String s2 = fc.changNull(changers.getString(2));
											newchangevalue.append("|"+s1.trim()+":"+s2.trim());
										}
										changeValue = newchangevalue.substring(1).toString();
										dc.CloseResultSet(changers);
									}else{
										changeValue = "";
										System.out.println("执行替换的SQL语句出现问题");
									}
									//保存到对象
									if (v1.equals("")){
										newchangevalue1 = newchangevalue;
										v1 = changeValueSQL;
									}else
										if (v2.equals("")){
											newchangevalue2 = newchangevalue;
											v2 = changeValueSQL;
										}else
											if (v3.equals("")){
												newchangevalue3 = newchangevalue;
												v3 = changeValueSQL;
											}else
												if (v4.equals("")){
													newchangevalue4 = newchangevalue;
													v4 = changeValueSQL;
												}else
													if (v5.equals("")){
														newchangevalue5 = newchangevalue;
														v5 = changeValueSQL;
													}
									//
									obj[16 + nChangeValue] = changeValue;
								}else
									changeValue = newchangevalue.substring(1).toString();


							}


						}else
							changeValue = changeValueSQL;

						//----------------------------------------------------

						String[] cvs = changeValue.split("\\|");
						for(String s : cvs){
							if(s.indexOf(putResult[i]) != -1){
								int a = s.indexOf(":");
								if(a != -1){
									String ps = s.substring(a+1);
									//下面的IF是为了检验数据库中的结构是否正确
									if((putResult[i]+":"+ps).equals(s)){
										putResult[i] = ps;
									}
								}
							}
						}
					}
					//------------------------------------------------------------------


					//----对字符串过长的截取------
					if(null != currentField.getFfieldshowsize() && putResult[i].length() > currentField.getFfieldshowsize()){
						putResult[i] = putResult[i].substring(0, currentField.getFfieldshowsize()) + "...";
					}

					//----对字符串过长的截取------
				}

				//---------------------记录行按条件变色显示-----------------------

				//初始化显示颜色
				String colorStr = da.getValue("CHANGECOLOR_SHOW");

				putResult[list.size()] = colorStr;

				//--------------------------------------------------------


				//----------下面此段添加的是对每一行数据的5个URL按钮是否显示的控制（0显示，1不显示）------

				//初始化全为显示。
				String cheackURL1 = "0";
				String cheackURL2 = "0";
				String cheackURL3 = "0";
				String cheackURL4 = "0";
				String cheackURL5 = "0";


				//查询SQL语句中添加(CASE WHEN fid != '10' THEN 'true' ELSE 'false' END)
				if("false".equals(da.getValue("URL_1").toLowerCase())) cheackURL1 = "1";
				if("false".equals(da.getValue("URL_2").toLowerCase())) cheackURL2 = "1";
				if("false".equals(da.getValue("URL_3").toLowerCase())) cheackURL3 = "1";
				if("false".equals(da.getValue("URL_4").toLowerCase())) cheackURL4 = "1";
				if("false".equals(da.getValue("URL_5").toLowerCase())) cheackURL5 = "1";
				//

				putResult[list.size() + 1] = cheackURL1;
				putResult[list.size() + 2] = cheackURL2;
				putResult[list.size() + 3] = cheackURL3;
				putResult[list.size() + 4] = cheackURL4;
				putResult[list.size() + 5] = cheackURL5;

				//-----------------------------------------------------------------


				//---------添加对删除按钮是否显示的控制start----------------
				String checkdelButten = "1";
				boolean executeDelSQL = false;
				String beforeDel = fc.changNull(busiInfo.getBeforedel());
				if(!"".equals(beforeDel)){
					executeDelSQL = Tools.beforeORafterValue(beforeDel, request, dc, busiInfo, da.getValue(pkid));
					checkdelButten = executeDelSQL ? "0" : "1";
				}else{
					checkdelButten = "0";
				}


				putResult[list.size() + 6] = checkdelButten;
				//---------添加对删除按钮是否显示的控制end-----------------

				//存放主键ID
				putResult[list.size() + 7] = da.getValue(pkid);

				datalist.add(putResult);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		request.setAttribute("spaceNum", spaceNum);//用于显示分类空行的
		request.setAttribute("currentpage", currentpage);// 当前页
		request.setAttribute("pagecount", da.nPageCount);// 总页数
		request.setAttribute("datalist", datalist);
		// 显示序号列
		if(busiInfoPageSize != null){
			request.setAttribute("startRowNum", (currentpage - 1) * busiInfoPageSize);
		}else{
			request.setAttribute("startRowNum", (currentpage - 1) * 15);
		}

		// -----------以下是用于显示4种查询项的---------------------------
		// 拿出所有的能显示的查询项
		List<TbusiField> selItemlist = new ArrayList<TbusiField>();
		for (int m = 0; m < listForSelItems.size(); m++) {
			TbusiField field = listForSelItems.get(m);
			if (field.getFisselectitem().equals("true")) {
				selItemlist.add(field);
			}
		}
		//
		List zeroTypeSel = new ArrayList();
		List oneTypeSel = new ArrayList();
		List twoTypeSel = new ArrayList();
		//添加日期查询方式
		List threeTypeSel = new ArrayList();
		//
		for (int n = 0; n < selItemlist.size(); n++) {
			TbusiField field = selItemlist.get(n);

			// zeroTypeSel存放查询分组为0的查询项
			if (0 == field.getFselectgroup()) {
				//
				List oneSelect = new ArrayList();
				//
				oneSelect.add(field.getFfieldname());
				oneSelect.add(field.getFshowname());
				//
				String defaultvalue = field.getFseldefaultvalue();
				if (null == defaultvalue) {
					defaultvalue = "";
				}
				//标示是否有两个查询项
				boolean doubleSelfield = false;

				//添加对SQL查询的支持
				if(defaultvalue.indexOf("SQL:") == 0){

					try{
						StringBuffer newchangevalue = new StringBuffer();
						String slectSQL = defaultvalue.substring(4).toLowerCase();
						String selfields = fc.getString(slectSQL, "select", "from");
						if(selfields.indexOf(",") > 0){
							//有替换值的
							doubleSelfield = true;
							ResultSet changers = dc.query(slectSQL);
							if(changers != null){
								while(changers.next()){
									//columnIndex the first column is 1, the second is 2, ...
									String s1 = fc.changNull(changers.getString(1));
									String s2 = fc.changNull(changers.getString(2));
									//
									newchangevalue.append("|"+s1.trim());
									newchangevalue.append("|"+s2.trim());
								}
								defaultvalue = newchangevalue.substring(1).toString();
							}else{
								System.out.println("执行下拉查询，替换的SQL语句出现问题" + defaultvalue);
								defaultvalue = "";
							}
							dc.CloseResultSet(changers);
						}else{
							ResultSet changers = dc.query(slectSQL);
							if(changers != null){
								while(changers.next()){
									//columnIndex the first column is 1, the second is 2, ...
									String s1 = fc.changNull(changers.getString(1));
									newchangevalue.append("|"+s1.trim());
								}
								defaultvalue = newchangevalue.substring(1).toString();
								dc.CloseResultSet(changers);
							}else{
								System.out.println("执行下拉查询，替换的SQL语句出现问题" + defaultvalue);
								defaultvalue = "";
							}
						}

					}catch(Exception e){
						System.out.println("执行下拉查询，替换的SQL语句出现异常" + defaultvalue);
						defaultvalue = "";
					}
				}
				String[] defaults = defaultvalue.split("\\|");
				//
				for (int k = 0; k < defaults.length; k++) {
					oneSelect.add(defaults[k]);
					if(doubleSelfield == false){
						oneSelect.add(defaults[k]);
					}

				}
				zeroTypeSel.add(oneSelect);
			}

			// oneTypeSel存放查询分组为1的查询项
			if (1 == field.getFselectgroup()) {
				String[] options = new String[2];
				options[0] = field.getFfieldname();// 字段名
				options[1] = field.getFshowname();// 显示名
				oneTypeSel.add(options);
			}

			// twoTypeSel存放查询分组为2的查询项
			if (2 == field.getFselectgroup()) {
				String[] inputs = new String[3];
				inputs[0] = field.getFshowname();// 显示名
				inputs[1] = field.getFfieldname();// 字段名

				/*
				 * 查询默认值在页面上已经不再显示了。如果添加将下面这段JSP代码放到
				 * <input name="rfy_<%= inpsel[1]%>"  type="text" class="search_txt" size="12" />
				 * 里面就可以了
				 */
				//<%if(inpsel[2]!=null){ %>value="<%=inpsel[2]%>"<%} %>
				inputs[2] = fc.changNull(field.getFseldefaultvalue());// 查询默认值
				if("[GetNowTime2()]".equals(inputs[2])){
					inputs[2] = fc.getTime("yyMMdd");
				}


				twoTypeSel.add(inputs);
			}

			//添加时间查询方式
			if (3 == field.getFselectgroup()){
				String[] inp = new String[2];
				inp[0] = field.getFshowname();
				inp[1] = field.getFfieldname();
				threeTypeSel.add(inp);
			}

		}
		request.setAttribute("zeroTypeSel", zeroTypeSel);
		request.setAttribute("oneTypeSel", oneTypeSel);
		request.setAttribute("twoTypeSel", twoTypeSel);
		//添加时间查询方式
		request.setAttribute("threeTypeSel", threeTypeSel);


		//---------这部分是下载下拉菜单显示的部分-----------
		List<Tdownload> dl = null;
		if(fileExists){
			dl = (List<Tdownload>)obj[14];
		}else{
			dl = downloadService.findKindOfNameByInfoid(datascourceId);
			obj[14] = dl;
		}

		request.setAttribute("kindofname", dl);
		//---------------------------------------

		//--------以下部分是添加的总计----------------------


		String amount = busiInfo.getFamount();
		if(amount != null && !"".equals(amount)){

			//SQL语句重新拼接------------

			int fromposition = newsql.toLowerCase().indexOf(" from ");

			 newsql = "select " + amount + " " + newsql.substring(fromposition);

			 //去掉order by
			 if(newsql.indexOf(" order by ")!=-1){
				 int orderbyNum = newsql.indexOf(" order by ");
				 newsql = newsql.substring(0,orderbyNum);
			 }
			 
			 //去掉group by
			 if(newsql.indexOf(" group by ")!=-1){
				 int groupbyNum = newsql.indexOf(" group by ");
				 newsql = newsql.substring(0,groupbyNum);
			 }

			 da.query(newsql);  //执行SQL语句
//			 System.out.println("总结的SQL:"+newsql);
			 ResultSet rs = da.rs;

			//-----------------------
			List<String> amountlist = new ArrayList<String>();
			for(TbusiField fie : list){
				String amountInfo = fie.getFamountInfo();
				if(null == amountInfo || "".equals(amountInfo)){
					amountlist.add("");
				}else{
					try{
						if(amountInfo.indexOf("[") != -1 && amountInfo.indexOf("]") != -1){
							String fieldas = fc.getString(amountInfo, "[", "]");
							String amountValue = fc.getrv(rs, fieldas, "");
							amountInfo = fc.replace(amountInfo, "["+fieldas+"]", amountValue);
						}

						amountlist.add(amountInfo);

					}catch(Exception e){
						amountlist.add("");
						System.out.println("总结部分出现问题,字段名称为:"+fie.getFshowname()+". 错误信息为："+e.getMessage()+".");
					}
				}
			}
			request.setAttribute("amountlist", amountlist);//将总结的信息发送到页面显示
		}

		//从页面中搬过来的代码，去掉了页面中的，用于详细按钮的控制
		String systemid=null;String fieldid=null;String pkfid=null;Integer selectgroup=0;

		if("0".equals(busiInfo.getFisdetail())){
			String detailurl = busiInfo.getFdetailurl();
	        if(detailurl==null){detailurl="";}
	        String[] s=detailurl.split("\\|");

	        for(int i=0;i<s.length;i++){
	          if(s[i].indexOf("systemid")!=-1) {
	          systemid=s[i].substring(9);
	          }

	          if(s[i].indexOf("infoid")!=-1) {
	          fieldid=s[i].substring(7);
	          }

	          if(s[i].indexOf("pkfid")!=-1) {
	          pkfid=s[i].substring(6);
	          }
	        }

			}

		if(fileExists){
			if("0".equals(busiInfo.getFisdetail())){
				String detailurl = busiInfo.getFdetailurl();
		        if(detailurl==null){detailurl="";}
		        String[] s=detailurl.split("\\|");

		        for(int i=0;i<s.length;i++){
		          if(s[i].indexOf("systemid")!=-1) {
		          systemid=s[i].substring(9);
		          }

		          if(s[i].indexOf("infoid")!=-1) {
		          fieldid=s[i].substring(7);
		          }

		          if(s[i].indexOf("pkfid")!=-1) {
		          pkfid=s[i].substring(6);
		          }
		        }

				}
			selectgroup = (Integer)obj[15];

		}else{
			if("0".equals(busiInfo.getFisdetail())){
				String detailurl = busiInfo.getFdetailurl();
		        if(detailurl==null){detailurl="";}
		        String[] s=detailurl.split("\\|");

		        for(int i=0;i<s.length;i++){
		          if(s[i].indexOf("systemid")!=-1) {
		          systemid=s[i].substring(9);
		          }

		          if(s[i].indexOf("infoid")!=-1) {
		          fieldid=s[i].substring(7);
		          }

		          if(s[i].indexOf("pkfid")!=-1) {
		          pkfid=s[i].substring(6);
		          }
		        }
		        selectgroup = busiFieldService.getselectGroup(fieldid,pkfid);
				}
			obj[15] = selectgroup;

			if(b1){
				Tools.writeFile(allFilePath, obj);
			}

		}
		request.setAttribute("systemid_mode", systemid);
		request.setAttribute("fieldid_mode", fieldid);
		request.setAttribute("pkfid_mode", pkfid);
		request.setAttribute("selectgroup_mode", selectgroup);
		//-------------------------------------------
		da.Close();
		if(!connType){
			dc.CloseConnect();
		}
		return mapping.findForward("databrowseSet");
	}

	/**
	 *	生成Excel文档
	 *
	 *	修改日期：2011年12月5日14:10:58
	 *	修改内容:替换POI包，1.老版本有BUG;2.新版本加快了生成excel的速度;
	 *	3.增强了性能，不会再出现下载2W条以上就报错的问题，目前支持到MS的excel最大值，6W
	 */
	public ActionForward createDownload(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String busiinfoid = request.getParameter("busiinfoid");
		String downloadname = request.getParameter("downloadname");
		String currentUserid = request.getParameter("currentUserid");
		String sql=request.getParameter("downloadsql");

//			sql = new String(request.getParameter("downloadsql").getBytes("ISO-8859-1"),"GB2312");
//			sql = URLDecoder.decode(sql, "GB2312");
			fc.message("生成Excel:"+sql);
			

		// 根据数据源ID获得数据源对象
		TbusiInfo busiInfo = busiInfoService.getBusiInfoByfid(busiinfoid);
		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

		//
		List<Tdownload>  dlist = downloadService.findByName(downloadname);
		//
		List<TbusiField> fieldlist = new ArrayList<TbusiField>();
		List<String> fieldshowname = new ArrayList<String>();
		for(Tdownload d : dlist){
			TbusiField f = busiFieldService.getBusiFieldByfid(d.getFfieldid());
			if(f != null){
				fieldlist.add(f);
				fieldshowname.add(f.getFshowname());
			}else{
				System.out.println(" 下载字段ID：  " + d.getFfieldid() + " 不存在 ，下载excel中自动忽略  ");
			}
		}

		//
		Tdownload dol = downloadService.findById(downloadname);
		String filename = currentUserid+"_"+fc.GetOrderID(dol.getFname()+"_")+".xls";
		// ResultSet封装在了里面
		int everyPageSize = 1000;//rs里面每次的记录最大数
		DataAccess da = new DataAccess(dc, everyPageSize);

		int nCount = 0;
		
		//修改：2011年12月5日17:40:56 ,去掉二次查询模式，全部用一次查询
		//根据添加的fquerytype字段，判断使用哪种查询方式。
//		if(!"1".equals(busiInfo.getFquerytype())){
			nCount = da.query(sql.toString());
//		}else{
//			String pkid=busiInfo.getFprimarykey();
//			if(null==pkid || "".equals(pkid)){
//				pkid="fid";
//			}
//			//使用二次 查询
//			nCount = da.query(sql.toString(), true, pkid);
//		}

		if(nCount>60000){
			System.out.println("超出6W的界定范围，不能生成Excel.");
			return null;
		}else{


//			request.getSession().setAttribute("downfilename", filename);
			//判断是否生成完成用的
			request.getSession().setAttribute(filename, "1");


			ResultSet rs=null;
			int ntime = 1;
			if(da.bUseCheckQuery==true){
				//二次查询的时候，执行下面的这个方法，rs2才能得到真正的值
				da.toRow(1, 1);
				rs=da.rs2;
				if(nCount%everyPageSize == 0){
					ntime= nCount/everyPageSize;
				}else{
					ntime = nCount/everyPageSize+1;
				}

			}else{
				rs=da.rs;
			}
			try {
				//将游标定位到最开始
			rs.first();
			//
			// 建立新HSSFWorkbook对象
			HSSFWorkbook wb = new HSSFWorkbook();
			// 建立新的sheet对象,busiInfo.getFtablename()
			HSSFSheet sheet = wb.createSheet();

			//excel第一行，显示名
			HSSFRow toprow = sheet.createRow(sheet.getLastRowNum());
			for(int j=0;j<fieldshowname.size();j++){
				//
				HSSFCell csCell = toprow.createCell(j);
//				csCell.setEncoding(HSSFCell.ENCODING_UTF_16);
				csCell.setCellValue(fieldshowname.get(j));
			}

				FileOutputStream fileOut = new FileOutputStream(GetConfigValue.newInstance().filePosition()+filename);
				wb.write(fileOut);
				fileOut.flush();
				fileOut.close();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			//保存到表中
			Tdownloadfile df = new Tdownloadfile(fc.GetOrderID(""), filename, currentUserid, new Timestamp(new Date().getTime()),"0%", "0");
			downloadFileService.saveDownloadFile(df);
			//


			//写入数据
			try {
				
				ResultSetMetaData rsmd = rs.getMetaData();
				 int count = rsmd.getColumnCount();
				 Map<String,String> map = new HashMap<String,String>();//字段名字与类型的对应map
				 Map<String,Map<String,String>> changeVasMap = new HashMap<String,Map<String,String>>();

				 for(short i=0;i<fieldlist.size();i++){
					 String cellType = "";
					 TbusiField field = fieldlist.get(i);

					//得到字段名字与类型的对应map
					try {
						 for (int j = 1; j <= count; j++) {
								String cellName= rsmd.getColumnName(j);
								if(cellName.toLowerCase().equals(field.getFfieldname().toLowerCase())){
									cellType=rsmd.getColumnTypeName(j);
									map.put(field.getFfieldname(), cellType);
									break;
								} 
							}
					} catch (Exception e) {
						System.out.println(" 得到字段名字与类型的对应map异常 ");
					}

					//得当需要替换的替换项
					String valueTemp = fc.changNull(field.getFchangevalue());
					
					//------------替换值中使用SQL语句，动态替换---------------------
//					String changeValue = field.getFchangevalue();
					if(valueTemp.indexOf("SQL:") == 0){
						StringBuffer newchangevalue = new StringBuffer();
						String changeSQL = valueTemp.substring(4);
						ResultSet changers = dc.query(changeSQL);
						if(changers != null){
							while(changers.next()){
								//columnIndex the first column is 1, the second is 2, ...
								String s1 = fc.changNull(changers.getString(1));
								String s2 = fc.changNull(changers.getString(2));
								newchangevalue.append("|"+s1.trim()+":"+s2.trim());
							}
							valueTemp = newchangevalue.substring(1).toString();
							dc.CloseResultSet(changers);
						}else{
							valueTemp = "";
							System.out.println("生成excel文件时,执行替换的SQL语句出现问题");
						}
					}

					//----------------------------------------------------
					
					if(!"".equals(valueTemp)){
						 Map<String,String> mapTemp = new HashMap<String,String>();
						 String[] vts = valueTemp.split("\\|");
						 for(String vt : vts){
							 String[] s = vt.split(":");
							 try {
								 mapTemp.put(s[0], s[1]);
							} catch (Exception e) {
							}
						 }
						 changeVasMap.put(field.getFfieldname(), mapTemp);
					}

				 }
				
				 //-----------------------
				
				FileOutputStream fileOut = null;
				InputStream filein = null;
				HSSFWorkbook  wb1 = null;
				HSSFSheet sheet = null;
				HSSFCellStyle cellStyle = null;
				int number = 0;//记录着条数
				int MAXNum = 3000;//每3000条写入文件，并关闭文件一次

				//ntime=1表示使用的是普通查询，不是二次查询，所以只有一个rs，当ntime>1时，表示使用了二次查询，按页分，至少有二个rs，所以要先遍历所有rs
				for(int n=1;n<=ntime;n++){
					da.toRow(n, 1);
					if(da.bUseCheckQuery==true){
						rs = da.rs2;
					}
				rs.previous();//获得rs的上一条，因为下面while循环，调用了一次.next(),所以要先校正过来
				while(rs != null && rs.next()){
					if(number % MAXNum ==0){
						filein = new FileInputStream(GetConfigValue.newInstance().filePosition()+filename);
						wb1 = new HSSFWorkbook(filein);
						sheet = wb1.getSheetAt(0);
						fileOut = new FileOutputStream(GetConfigValue.newInstance().filePosition()+filename);
						
						HSSFDataFormat format = wb1.createDataFormat();
						cellStyle = wb1.createCellStyle();
						cellStyle.setDataFormat(format.getFormat("0.00")); //  两位小数
						
					}

					//excel中内容
					HSSFRow row = sheet.createRow(sheet.getLastRowNum()+1);
					HSSFCell csCell = null;
					String cellType = null;
					for(int i=0;i<fieldlist.size();i++){
						TbusiField field = fieldlist.get(i);
						//
						 cellType = map.get(field.getFfieldname());
						 csCell = row.createCell(i);

						//
						if("int".equals(cellType)){
							int value = rs.getInt(field.getFfieldname());
//							csCell.setEncoding(HSSFCell.ENCODING_UTF_16);
							csCell.setCellValue(value);
						}else
						if("decimal".equals(cellType)){
							
							//
							float value = rs.getFloat(field.getFfieldname());
//							csCell.setEncoding(HSSFCell.ENCODING_UTF_16);
							csCell.setCellStyle(cellStyle);
							csCell.setCellValue(value);
						}
						else{
							String value = fc.getrv(rs, field.getFfieldname(), "");
							String resultValue = value;
							
							//检验是否解密
							if("0".equals(field.getFisencrypt())){
								value = Tools.UnPassword(value, fc.changNull(field.getFencryptkey()));
							}

							if(!"".equals(fc.changNull(field.getFchangevalue()))){
								Map<String,String> tempMap = changeVasMap.get(field.getFfieldname());
								resultValue = tempMap.get(value);
							}

							if(resultValue == null) {resultValue = value;}
//							csCell.setEncoding(HSSFCell.ENCODING_UTF_16);
							csCell.setCellValue(resultValue);
						}

					}
					number++;
//					System.out.println(number);
					if(number % MAXNum == 0){
						wb1.write(fileOut);
						fileOut.flush();
						fileOut.close();
						filein.close();
						int degree = number * 100 / nCount;
						if(degree == 100){
							df.setFdegree("完成");
						}else{
							df.setFdegree(degree + "%");
						}
						downloadFileService.update(df);
						}

				}
				if(number % MAXNum != 0){
					wb1.write(fileOut);
					fileOut.flush();
					fileOut.close();
					filein.close();
					int degree = number * 100 / nCount;
					if(degree == 100){
						df.setFdegree("完成");
					}else{
						df.setFdegree(degree + "%");
					}
					downloadFileService.update(df);
					}

				}
				df.setFdegree("完成");
				downloadFileService.update(df);
				//excel生成完成
				request.getSession().removeAttribute(filename);
//				out.print("正在生成，稍后下载，文件名:"+filename);
			}catch(Exception e){
				System.out.println(" 生成文档，写入具体数据时出错. ");
				e.printStackTrace();
			}finally{
				da.Close();
				dc.CloseConnect();
			}

		}
		return null;
	}

}