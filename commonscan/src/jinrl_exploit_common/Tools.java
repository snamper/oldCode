package jinrl_exploit_common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;

import jinrl_exploit_Po.TbusiField;
import jinrl_exploit_Po.TbusiInfo;
import jinrl_exploit_Po.Tposition;

public class Tools {
	
	private static DataConnect sysdc = new DataConnect("sysdb", false);

	/**
	 * @param obj
	 * @return
	 */
	public static boolean GetisusedValue(Object obj) {
		String value = "1";
		try {
			value = (String) obj.getClass().getMethod("getFisused",
					new Class[] {}).invoke(obj, new Object[] {});
			if (null == value) {
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		if (!"0".equals(value)) {
			return false;
		} else {
			return true;
		}

	}

	/**
	 * 去除重复的岗位，并排序
	 *
	 * @param list
	 * @return
	 */
	public static List<Tposition> removeDuplicatePosition(List<Tposition> list) {
		Set<Tposition> set = new HashSet<Tposition>();
		for (Iterator<Tposition> it = list.iterator(); it.hasNext();) {
			set.add(it.next());
		}
		Set<Tposition> set1 = new TreeSet<Tposition>(set);
		List<Tposition> l = new ArrayList<Tposition>(set1);
		return l;

	}

	public static String getCheckURL(String checkurl) {
		String cheackURL1 = "0";
		try {
			// 字符运算
			if (checkurl.toUpperCase().indexOf("C:") == 0) {
				String s = checkurl.substring(2);
				if (s.indexOf("=") > -1) {
					String[] values = s.split("=");
					if (values[0].equals(values[1])) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}
				} else if (s.indexOf("!=") > -1) {
					String[] values = s.split("!=");
					if (!values[0].equals(values[1])) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}

				} else if (s.indexOf("@") > -1) {
					String[] values = s.split("@");
					if (values[0].indexOf(values[1]) > -1) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}
				} else {
					cheackURL1 = "0";
				}
			} else
			// 数字运算
			if (checkurl.toUpperCase().indexOf("N:") == 0) {
				String s = checkurl.substring(2);
				if (s.indexOf("=") > -1) {
					String[] values = s.split("=");
					if (Float.parseFloat(values[0]) == Float
							.parseFloat(values[1])) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}
				} else if (s.indexOf("!=") > -1) {
					String[] values = s.split("!=");
					if (Float.parseFloat(values[0]) != Float
							.parseFloat(values[1])) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}
				} else if (s.indexOf(">") > -1) {
					String[] values = s.split(">");
					if (Float.parseFloat(values[0]) > Float
							.parseFloat(values[1])) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}
				} else if (s.indexOf("<") > -1) {
					String[] values = s.split("<");
					if (Float.parseFloat(values[0]) < Float
							.parseFloat(values[1])) {
						cheackURL1 = "0";
					} else {
						cheackURL1 = "1";
					}
				} else {
					cheackURL1 = "0";
				}
			} else
				cheackURL1 = "0";
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("URL1-5 or changeColor error");
			return "0";
		}
		return cheackURL1;
	}

	public static boolean beforeORafterValue(String beforeAdd,
			HttpServletRequest request, DataConnect dc, TbusiInfo busiInfo,
			String dataid) {
		boolean executeAddSQL = false;
		// 执行保存前的SQL
		if (!"".equals(beforeAdd)) {
			String result;
			// 替换当前用户
			beforeAdd = fc.replace(beforeAdd, "[user()]", request.getParameter("currentUserid"));
			// 替换字段

			// Set busifileds = busiInfo.getTbusiFields();

			String pkid = busiInfo.getFprimarykey();
			if ((pkid == null) || ("".equals(pkid))) {
				pkid = "fid";
			}

			if(!"123*%%$##&12".equals(dataid)){

				String qsql = "select "
						+ fc.getString(busiInfo.getFsqlstring(), "select", "from")
						+ " from " + busiInfo.getFtablename() + " where " + pkid
						+ "='" + dataid + "'";

				ResultSet rs1 = dc.query(qsql);
				try {
					if (rs1 != null && rs1.next()) {
						while ((beforeAdd.indexOf("[") != -1) && (beforeAdd.indexOf("]") != -1)) {
								String field = fc.getString(beforeAdd, "[", "]");
								result = rs1.getString(field);
								beforeAdd = fc.replace(beforeAdd, "[" + field + "]", result);


						}
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					dc.CloseResultSet(rs1);
				}

			}else{
				while ((beforeAdd.indexOf("[") != -1) && (beforeAdd.indexOf("]") != -1)) {
					String field = fc.getString(beforeAdd, "[", "]");
					String s1 = request.getParameter(field);
					beforeAdd = fc.replace(beforeAdd, "[" + field + "]", s1);


				}
			}

			if (beforeAdd.indexOf("SQL:") != -1) {
				Boolean fb = false;
				String sql_temp = new String(beforeAdd);
				// 如  true|SQL: select.....
				if(beforeAdd.indexOf("SQL:") != 0){
					String s = beforeAdd.substring(0, beforeAdd.indexOf("SQL:"));
					fb = new Boolean(s.substring(0,s.length() - 1));
					sql_temp = sql_temp.substring(s.length());
				}
				ResultSet rs = null;
				try {
					rs = dc.query(sql_temp.substring(4));
					if (rs != null && rs.next()) {
						result = rs.getString(1);
						if ("true".equals(result) || "TRUE".equals(result)) {
							executeAddSQL = true;
						} else {
							executeAddSQL = false;
						}
					} else {
						executeAddSQL = fb;
					}
				} catch (Exception e) {
					// e.printStackTrace();
					executeAddSQL = false;
				}finally{
					dc.CloseResultSet(rs);
				}

			} else if (beforeAdd.indexOf("URL:") == 0) {

				try {
					result = fc.SendDataViaPost(beforeAdd.substring(4), "",
							"GB2312");
					if ("true".equals(result) || "TRUE".equals(result)) {
						executeAddSQL = true;
					} else {
						executeAddSQL = false;
					}
				} catch (Exception e) {
					executeAddSQL = false;
				}

			} else {
				executeAddSQL = false;
			}

		}
		return executeAddSQL;
	}

	/**
	 * 
	 * 方法名称: addSyslog 
	 * 方法描述: 是否保存message
	 * 创建人: renfy
	 * 创建时间: 2011-12-8 上午11:21:41
	 * @param operatorID
	 * @param functionID
	 * @param opearateInfo
	 * @param operateResult
	 * @param dataID
	 * @param saveMessage
	 * @version 1.0
	 *
	 */
	public static void addSyslog(String operatorID, String functionID,
			String opearateInfo, String operateResult, String dataID, boolean saveMessage) {
		String message = "";
		if(saveMessage && !"".equals(fc.changNull((functionID))) && !"".equals(fc.changNull((dataID)))){
			String sql = "select isnull(bi.fprimarykey,'fid') as pk,bi.ftablename,bi.fconndatabase  from tBusiInfo as bi,tfunction where tfunction.fid='"+functionID+"' and bi.fid=tfunction.fbusiinfoid";
			ResultSet rs = sysdc.query(sql);
			try {
				if(rs != null){
					String pk = "";
					String ftablename = "";
					String fconndatabase = "";
					if(rs.next()){
						pk = fc.getrv(rs, "pk", "");
						ftablename = fc.getrv(rs, "ftablename", "");
						fconndatabase = fc.getrv(rs, "fconndatabase", "");
						
					}
					sysdc.CloseResultSet(rs);
					
					//
					if(!"".equals(pk) && !"".equals(ftablename) && !"".equals(fconndatabase)){
						DataConnect onedc = new DataConnect(fconndatabase, false);
						sql = "select * from "+ftablename+" where "+pk+"='"+dataID+"'";
//						System.out.println(sql);
						ResultSet oners = onedc.query(sql);
						if(oners != null){
							StringBuffer ms = new StringBuffer();
							List<String> allColumnName = getAllColumnName(oners);
							if(oners.next()){
								for(String columnName : allColumnName){
									String colunmValue = oners.getString(columnName);
									ms.append("|"+columnName+"="+colunmValue+"");
								}
							}
							onedc.CloseResultSet(oners);
							if(ms.length() > 0){
								message = ms.substring(1).toString();
							}
						}
						onedc.CloseConnect();
					}
					
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		}
		addSyslog(operatorID, functionID, opearateInfo, operateResult, dataID, message);
	}
	
	
	public static void addSyslog(String operatorID, String functionID,
			String opearateInfo, String operateResult, String dataID) {
		addSyslog(operatorID, functionID, opearateInfo, operateResult, dataID, "");
	}

	public static void addSyslog(String operatorID, String functionID,
			String opearateInfo, String operateResult, String dataID,
			String message) {
		if (operatorID == null)
			operatorID = "";
		if (functionID == null)
			functionID = "";
		if (opearateInfo == null)
			opearateInfo = "";
		if (operateResult == null)
			operateResult = "";
		if (dataID == null)
			dataID = "";
		if (message == null)
			message = "";
		String fid = fc.GetOrderID("");
		String datatime = fc.getTime("");
		String sql = "insert into tsyslog values ('" + fid + "','" + operatorID
				+ "','" + datatime + "','" + functionID + "','" + opearateInfo
				+ "','" + operateResult + "','" + dataID + "','" + message
				+ "')";
		try {
			sysdc.execute(sql);
		} catch (Exception e) {
			System.out.println("日志记录出错");
		}

	}

	public static String changeURLJScode(String switchAllUrl,
			String currentUserid, TbusiInfo busiInfo, String dataid) {

		// 替换当前用户
		while (switchAllUrl.indexOf("[user()]") != -1) {
			switchAllUrl = fc.replace(switchAllUrl, "[user()]", currentUserid);
		}

//		Set<TbusiField> busifileds = busiInfo.getTbusiFields();
		// 连接数据源中所指定的数据库
		DataConnect dc = new DataConnect(busiInfo.getFconndatabase(), false);

		// 获得主键名称
		String pkid = busiInfo.getFprimarykey();
		if (null == pkid || "".equals(pkid)) {
			pkid = "fid";
		}
		// 获得整行的结果集
		String qsql = "select "
				+ fc.getString(busiInfo.getFsqlstring(), "select", "from")
				+ " from " + busiInfo.getFtablename() + " where " + pkid + "='"
				+ dataid + "'";

		// 替换字段
		ResultSet rs = dc.query(qsql);
		try {
			if (rs != null && rs.next()) {
				while (switchAllUrl.indexOf("[") != -1 && switchAllUrl.indexOf("]") != -1) {
						String field = fc.getString(switchAllUrl, "[", "]");
						// 固定使用了getString
						String result = rs.getString(field);
						switchAllUrl = fc.replace(switchAllUrl, "[" + field + "]",result);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		// 替换md5
		while (switchAllUrl.indexOf("md5(") != -1) {
			String md5yuan = fc.getString(switchAllUrl, "md5(", ")");
			switchAllUrl = fc.replace(switchAllUrl, "md5(" + md5yuan + ")", fc
					.getMd5Str(md5yuan));
		}

		dc.CloseResultSet(rs);
		dc.CloseConnect();
		//
		return switchAllUrl;

	}

	// 加密函数
	public static String EnPassword(String data, String key) {

		try {
			return "(@*@)" + common.Encrypts.encrypt(data, key);
		} catch (Exception e) {
			return "";
		}
	}

	// 解密函数
	public static String UnPassword(String data, String key) {
		// 检查是否要解密
		if (data.indexOf("(@*@)") != 0)
			return data;

		try {
			// 解密
			return common.Encrypts.uncrypt(data.substring(5), key);
		} catch (Exception e) {
			return "";
		}
	}

	public static String[] getSelectType(TbusiField field) {
		// 字段查询方式 ， = <> <= >= like% %like %like%
		String[] ss = new String[] { "=", "", "" };
		String st = field.getFselecttype();
		if (null != st && !"".equals(st) && !"=".equals(st)) {
			st = st.toLowerCase().trim();
			if ("<>".equals(st)) {
				ss[0] = "<>";
			} else if ("<".equals(st)) {
				ss[0] = "<";
			} else if (">".equals(st)) {
				ss[0] = ">";
			} else if ("<=".equals(st)) {
				ss[0] = "<=";
			} else if (">=".equals(st)) {
				ss[0] = ">=";
			} else if ("like%".equals(st)) {
				ss[0] = "like";
				ss[2] = "%";
			} else if ("%like".equals(st)) {
				ss[0] = "like";
				ss[1] = "%";
			} else if ("%like%".equals(st)) {
				ss[0] = "like";
				ss[1] = "%";
				ss[2] = "%";
			}
		}

		return ss;
	}

	public static void writeFile(String file, Object obj1) {
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;
		try {
			fos = new FileOutputStream(file);
			oos = new ObjectOutputStream(fos);
			oos.writeObject(obj1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				oos.close();
			} catch (IOException e) {
			}
		}
	}

	public static Object readFile(String file) {
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		Object obj1 = null;
		try {
			fis = new FileInputStream(file);
			ois = new ObjectInputStream(fis);
			obj1 = ois.readObject();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				ois.close();
			} catch (IOException e) {
			}
		}
		return obj1;
	}

	public static boolean checkFileExists(String pathname) {
		boolean flag = false;
		try {
			File file = new File(pathname);
			if (file.exists()) {
				flag = true;
			}
		} catch (Exception e) {
			System.out.println(" 文件不存在 ");
		}

		return flag;
	}

	public static void newFolder(String folderPath) {
		String filePath = folderPath;
		filePath = filePath.toString();
		java.io.File myFilePath = new java.io.File(filePath);
		try {
			if (myFilePath.isDirectory()) {
				fc.message(" 文件夹已经存在! ");
			} else {
				myFilePath.mkdir();
				fc.message("新建目录成功");
			}
		} catch (Exception e) {
			System.out.println("新建目录操作出错");
		}
	}

	public static boolean deleteFile(String fileName) {
		   File file = new File(fileName);
		   // 如果文件路径所对应的文件存在，并且是一个文件，则直接删除
		   if(file.exists() && file.isFile()) {
		    if(file.delete()) {
//		     System.out.println("删除单个文件" + fileName + "成功！");
		       return true;
		    } else {
		     System.out.println("删除单个文件" + fileName + "失败！");
		       return false;
		    }
		   } else {
		    System.out.println("删除单个文件失败：" + fileName + "不存在！");
		      return false;
		   }
		}

	public static boolean deleteDirectory(String fileName) {
		   File file = new File(fileName);
		   // 如果文件路径所对应的文件夹存在，并且是一个文件夹，则直接删除
		   if(file.exists() && file.isDirectory()) {
		    if(file.delete()) {
//		     System.out.println("删除文件夹" + fileName + "成功！");
		       return true;
		    } else {
		     System.out.println("删除文件夹" + fileName + "失败！");
		       return false;
		    }
		   } else {
		    System.out.println("删除文件夹：" + fileName + "不存在！");
		      return false;
		   }
		}
	
	/**
	 * 
	 * 方法名称: getAllColumnName 
	 * 方法描述: 
	 * 创建人: renfy
	 * 创建时间: 2011-12-8 下午12:43:04
	 * @param rs
	 * @return
	 * @version 1.0
	 *
	 */
	public static List<String> getAllColumnName(ResultSet rs){
		List<String> result = new ArrayList<String>();
		try {
			if (rs!=null) {
				ResultSetMetaData rsmd = rs.getMetaData();
				int ccount = rsmd.getColumnCount();
				for(int i = 1; i <= ccount; i++){
					String cname = rsmd.getColumnName(i);
					result.add(cname);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}
