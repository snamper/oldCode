/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.jinrl.powermodule.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.jinrl.powermodule.actionform.CheckPowerActionForm;
import com.jinrl.powermodule.common.Tools;
import com.jinrl.powermodule.common.fc;
import com.jinrl.powermodule.pojo.Tfunction;
import com.jinrl.powermodule.pojo.Tmoduletype;
import com.jinrl.powermodule.pojo.Tposition;
import com.jinrl.powermodule.pojo.Tuser;
import com.jinrl.powermodule.service.CheckPower;
import com.octo.captcha.servlet.image.SimpleImageCaptchaServlet;

/**
 * MyEclipse Struts
 * Creation date: 04-28-2010
 *
 * XDoclet definition:
 * @struts.action path="/checkpower" name="checkpowerForm" scope="request"
 */
public class CheckPowerAction extends DispatchAction {
	CheckPower cp;

	public CheckPower getCp() {
		return cp;
	}

	public void setCp(CheckPower cp) {
		this.cp = cp;
	}

	/**
	 * 用于明细时打开新窗口
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward loginSuccess2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		//String functionid = request.getParameter("functionid");
		String currentUserid = request.getParameter("currentUserid");
		//String sign = request.getParameter("sign");
		String checkloginsign = request.getParameter("checkloginsign");


		session.setAttribute("currentUserid_1", currentUserid);

		session.setAttribute("checkloginsign_1", checkloginsign);

//		//动态显示模块名称
//		request.setAttribute("allmt", cp.findAllmt());
		//

		//得到字段查询分组号
		String selectgroup = request.getParameter("selectgroup");
		session.setAttribute("selectgroup", selectgroup);
		//根据哪个字段查询
		String pkfid = request.getParameter("pkfid");
		session.setAttribute("pkfid", pkfid);
		//对应字段的值
		String pkvalue = request.getParameter("pkvalue");
		session.setAttribute("pkvalue", pkvalue);
		//要打开表的第一个字段的id
		//改成信息表ID
		String id = request.getParameter("fieldid");
		session.setAttribute("currid", id);
		Tfunction funci = cp.findByBusiInfoID(id);
		String functionid = funci.getFid();
		if(funci != null){
			session.setAttribute("functionid_1",functionid);
		}else{
			session.removeAttribute("functionid_1");
		}

		String sign =currentUserid + functionid +"H7F65E49JED5OIF4U4DE664C66D6EET3";
		sign = fc.getMd5Str(sign);
		  session.setAttribute("sign_1", sign);

		//要显示的系统id
		String rightshow = request.getParameter("rightshow");
		session.setAttribute("rightshow", rightshow);
		try {
			Tmoduletype mt = cp.findMtById(Integer.parseInt(rightshow));
			if(mt.getFip() != null){
				session.setAttribute("getHttpUrl_1",  "http://" + mt.getFip());
			}else{
				session.removeAttribute("getHttpUrl_1");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//当前用户ID
		String userid = (String)request.getSession().getAttribute("currentUserid");
		if(userid==null){
			return mapping.findForward("loginerror");
		}
//		String cuid = (String)request.getSession().getAttribute("currentUserid");
		if(!userid.equals(currentUserid)){
			return mapping.findForward("loginerror");
		}
		//登录成功
		Tuser user = cp.getUserById(userid);
		request.getSession().setAttribute("user", user);
		//获得此用户所有岗位
		List<Tposition> listposition = cp.getPositionsByuser2(user);
		request.getSession().setAttribute("listposition", listposition);



		//用于控制是否显示统计
		String showStatistic = "1";
		for(Tposition po : listposition){
			if("0".equals(po.getFshowstatistic())){
				showStatistic = "0";
			}
		}
		session.setAttribute("showStatistic", showStatistic);



//							//获得当前用户分配的所有功能
//							List<Tfunction> listfunction = cp.geturl2(userid);
//							//获得公共功能
//							List<Tfunction> listfcomm = cp.findAllCommonFuntions();
//							//结合2个功能集合到一起
//							for(Tfunction f : listfcomm){
//								listfunction.add(f);
//							}
//							//删除重复的
//							List l =Tools.removeDuplicateFunction(listfunction);
//							listfunction = l;
		List<Tfunction> listfunction = cp.findAllFunByUserId(userid);
		//
		String showtypes = request.getParameter("showtypes");
		if(null==showtypes || "".equals("showtypes")){
			request.getSession().setAttribute("notShowAny", 1);
		}else{
			request.getSession().setAttribute("notShowAny", 0);
			List<Tfunction> listfs = new ArrayList<Tfunction>();
			for(Tfunction f :listfunction){
				if(showtypes.equals(f.getFsystemid())){
					listfs.add(f);
				}
			}

			//
			List<String> functionModuleid = new ArrayList<String>();
			for(Tfunction fu :listfs){
				functionModuleid.add(fu.getFmoduleid());
			}
			//
			List resultlists = new ArrayList();

			//setfmid 存放有序不重复的模块id
			Set<String> setfmid = new TreeSet<String>(functionModuleid);
			for(String s :setfmid){
				List resultlist = new ArrayList(2);
				List<Tfunction> funclist = new ArrayList<Tfunction>();
				for( Tfunction func : listfs){
					if(s.equals(func.getFmoduleid())){
						funclist.add(func);
					}
				}
				resultlist.add(s);
				resultlist.add(funclist);
				resultlists.add(resultlist);
			}
			//

			request.getSession().setAttribute("resultlists", resultlists);
		}

		return mapping.findForward("loginsuccess");
	}


	/**
	 * 登录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward isLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CheckPowerActionForm cpForm = (CheckPowerActionForm) form;
		String userid = cpForm.getUsername();
		String password = cpForm.getPassword();
		String checkcode = cpForm.getCheckcode();
		String foremail = request.getParameter("foremail");
		String sessionid = request.getSession().toString();
		//fc.message(sessionid);

		//检验是否存在空值
		if("".equals(userid) || "".equals(password) || "".equals(checkcode)){return mapping.findForward("loginerror");}
//---------------邮箱验证的部分-------------------------------
		if("abc".equals(foremail)){
			String cemailcode = (String) request.getSession().getAttribute("emailcode");
			if(null == cemailcode || "".equals(cemailcode) || !cemailcode.equals(checkcode)){
				request.getSession().setAttribute("codeerror", "邮箱验证码填写错误！");
				Tools.addSyslog(request, userid, "", "邮箱验证码错误", "失败", "");
				return mapping.findForward("loginerror");
			}

			//判断用户名密码是否正确
			boolean fag = cp.isLogined2(userid, password, request);
			if(fag){
				request.setAttribute("userid", userid);
				Tools.addSyslog(request, userid, "", "邮箱验证码登录", "成功", "");
				return mapping.findForward("logintrue");
			}else{
				Tools.addSyslog(request, userid, "", "邮箱登录方式，用户名密码错误", "失败", "");
				request.getSession().setAttribute("codeerror", "用户名密码错误！");
				return mapping.findForward("loginerror");
			}
		}
//-----------------------------------------------
		//判断验证码是否正确
//		String c = (String) request.getSession().getAttribute("checkcode");
//		if(null == c || "".equals(c) || !c.equals(checkcode)){
//			request.getSession().setAttribute("codeerror", "验证码错误！");
//			Tools.addSyslog(request, userid, "", "普通验证码错误", "失败", "");
//			return mapping.findForward("loginerror");
//		}
		//新取得验证码方式,gaihl,11-01-28
		if(!SimpleImageCaptchaServlet.validateResponse(request, checkcode.toLowerCase())){
			request.getSession().setAttribute("codeerror", "验证码错误！");
			Tools.addSyslog(request, userid, "", "普通验证码错误", "失败", "");
			return mapping.findForward("loginerror");
		}
		//判断用户名密码是否正确
		int flag = cp.isLogined(userid, password, request);
		if(flag==0){
			request.setAttribute("userid", userid);
			Tools.addSyslog(request, userid, "", "普通验证码登录", "成功", "");
			return mapping.findForward("logintrue");
		}else if(flag==1){
			request.getSession().setAttribute("codeerror", "用户名密码错误！");
			Tools.addSyslog(request, userid, "", "普通登录方式，用户名密码错误", "失败", "");
			return mapping.findForward("loginerror");
		}else if(flag==2){
//			request.getSession().setAttribute("codeerror", "需要USB-KEY验证!");
//			return mapping.findForward("loginerror");
			String sUsbString = request.getParameter("v_usbcode");
			if(null ==sUsbString){sUsbString="";}
			String sUsbCode = "", sUsbSign = "";
			if (sUsbString.length() >= 32) sUsbCode = sUsbString.substring(0, 32);
			if (sUsbString.length() > 32) sUsbSign = sUsbString.substring(32);
			if (fc.getMd5Str(fc.getTime("yyyyMMddHH") + "mayidkojfiuee783f8d92").equals(sUsbCode)) {
				//授权合法
				request.setAttribute("userid", userid);
				Tools.addSyslog(request, userid, "", "USB-KEY验证登录", "成功", "");
				return mapping.findForward("logintrue");
				}else{
					request.getSession().setAttribute("codeerror", "USB-KEY验证失败!");
					Tools.addSyslog(request, userid, "", "USB-KEY登录方式，USB-KEY验证失败", "失败", "");
					return mapping.findForward("loginerror");
				}

		}else if(flag==3){
//			request.getSession().setAttribute("codeerror", "IP地址错误!");
//			return mapping.findForward("loginerror");
			String sUsbString = request.getParameter("v_usbcode");
			if(null ==sUsbString){sUsbString="";}
			String sUsbCode = "", sUsbSign = "";
			if (sUsbString.length() >= 32) sUsbCode = sUsbString.substring(0, 32);
			if (sUsbString.length() > 32) sUsbSign = sUsbString.substring(32);
			if (fc.getMd5Str(fc.getTime("yyyyMMddHH") + "mayidkojfiuee783f8d92").equals(sUsbCode)) {
				//授权合法
				request.setAttribute("userid", userid);
				Tools.addSyslog(request, userid, "", "IP地址验证登录", "成功", "");
				return mapping.findForward("logintrue");
				}else{
					request.getSession().setAttribute("codeerror", "IP地址错误,USB-KEY验证失败!");
					Tools.addSyslog(request, userid, "", "IP登录方式，验证失败", "失败", "");
					return mapping.findForward("loginerror");
				}
		}else{
			return mapping.findForward("loginerror");
		}
		//

	}

	/**
	 * 显示首页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward loginSuccess(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		response.setContentType("text/html;charset=gb2312");
		HttpSession session = request.getSession();
		//
		String userid = null;
		String id = request.getParameter("userid");
		if(null != id){
			userid = id;
		}else{
			userid = (String) request.getAttribute("userid");
		}

		String cuid = (String)session.getAttribute("currentUserid");
		if(!userid.equals(cuid)){
			return mapping.findForward("loginerror");
		}
		//登录成功
		Tuser user = cp.getUserById(userid);
		session.setAttribute("user", user);
		//获得此用户所有岗位
		List<Tposition> listposition = cp.getPositionsByuser2(user);
		session.setAttribute("listposition", listposition);


		//用于控制是否显示统计
		String showStatistic = "1";
		for(Tposition po : listposition){
			if("0".equals(po.getFshowstatistic())){
				showStatistic = "0";
			}
		}
		session.setAttribute("showStatistic", showStatistic);


//							//获得当前用户分配的所有功能
//							List<Tfunction> listfunction = cp.geturl2(userid);
//							//获得公共功能
//							List<Tfunction> listfcomm = cp.findAllCommonFuntions();
//							//结合2个功能集合到一起
//							for(Tfunction f : listfcomm){
//								listfunction.add(f);
//							}
//							//删除重复的
//							List l =Tools.removeDuplicateFunction(listfunction);
//							listfunction = l;
		List<Tfunction> listfunction = cp.findAllFunByUserId(userid);
		//
		String showtypes = request.getParameter("showtypes");
		session.setAttribute("showtypes", showtypes);
		if(null==showtypes || "".equals(showtypes)){
			//首次登陆设置为0，显示系统设置
			showtypes = "0";
			//
//			request.getSession().setAttribute("notShowAny", 1);
			//更换logo用
//			request.getSession().setAttribute("logotype", "0");
		}
//		else{
			//更换logo用
		session.setAttribute("logotype", showtypes);
			//有功能项显示
//			request.getSession().setAttribute("notShowAny", 0);
		Set<Integer> systemset = new HashSet<Integer>();
			List<Tfunction> listfs = new ArrayList<Tfunction>();
			for(Tfunction f :listfunction){
				//当某系统下没有功能时，不显示此系统
				systemset.add(Integer.parseInt(f.getFsystemid()));
				//
				if(showtypes.equals(f.getFsystemid())){
					listfs.add(f);
				}
			}
			//动态显示模块名称
			session.setAttribute("allmt", cp.findAllmt(systemset));
			//
//			List<String> functionModuleid = new ArrayList<String>();
//			for(Tfunction fu :listfs){
//				functionModuleid.add(fu.getFmoduleid());
//			}
//			//
//			List resultlists = new ArrayList();
//
//			//setfmid 存放有序不重复的模块id(移除掉重复的，开始用的TreeSet尽管去掉重复的了，但顺序乱了)
//			List<String> setfmid = new ArrayList<String>();
//			for(String fmid : functionModuleid){
//				int a = 0;
//				for(String sfid : setfmid){
//					if(sfid.equals(fmid)){
//						a=1;
//						break;
//					}
//				}
//				if(a==0){
//					setfmid.add(fmid);
//				}
//			}
//			//
//			for(String s :setfmid){
//				List resultlist = new ArrayList(2);
//				List<Tfunction> funclist = new ArrayList<Tfunction>();
//				for( Tfunction func : listfs){
//					if(s.equals(func.getFmoduleid())){
//						funclist.add(func);
//					}
//				}
//				resultlist.add(s);
//				resultlist.add(funclist);
//				resultlists.add(resultlist);
//			}

			//注释掉的原因是left的生成在changeleft方法中实现了
			//session.setAttribute("resultlists", resultlists);
//		}
			//保存cookies,用于下次显示用户名
            //创建用户名Cookie对象
            Cookie cookieName = new Cookie("loginUserNameCookie", cuid);
             //设置Cookie保存时间(秒)
            cookieName.setMaxAge(7*24*60*60);
            //添加到客户端
            response.addCookie(cookieName);

		return mapping.findForward("loginsuccess");
	}

	/**
	 * 显示功能URL
	 */
	public ActionForward functionurl(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String functionid = request.getParameter("functionid");
		String currentUserid = (String) request.getSession().getAttribute("currentUserid");

			try {
				if(currentUserid == null){
					response.sendRedirect("/powermodule/login.jsp");
					return null;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		String path = (String)request.getSession().getAttribute("path");
		String url = cp.isallowed(currentUserid,functionid,path+"/login.jsp",request);
//		String sysid = cp.getSystemId(functionid);
//		request.setAttribute("sysid", sysid);
		Tfunction function = cp.findByFunctionID(functionid);
		Tmoduletype mt = cp.findMtById(Integer.parseInt(function.getFsystemid()));
		request.setAttribute("moduleType", mt);
		request.setAttribute("funtcion", function);
		request.setAttribute("showfunctionURL", url);

		return mapping.findForward("showfunctionURL");
	}

	/**
	 * 注销
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward quit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String userid = (String)session.getAttribute("currentUserid");
		String ip = request.getRemoteAddr();
		String ip_userid = ip+"_"+userid;
		session.removeAttribute("currentUserid");
		session.removeAttribute("user");
		session.removeAttribute("listposition");
		session.removeAttribute("listfunction");
		session.removeAttribute("checkcode");
		session.removeAttribute("codeerror");
		session.removeAttribute("emailcode");
		session.getServletContext().removeAttribute(ip_userid);
		session.invalidate();
		//fc.message(	session.getId());
		return mapping.findForward("loginerror");
	}

	/**
	 * 更换左菜单内容
	 */
	public ActionForward changeleft(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();

		//此句是为了在点击明细按钮时，会保存一个session属性，导致下次打开其他系统的时也打开明细出来的表，所以有必要移除它
		session.removeAttribute("rightshow");
		//
		String userid = null;
		String id = request.getParameter("userid");
		if(null != id){
			userid = id;
		}else{
			userid = (String) request.getAttribute("userid");
		}

		String cuid = (String)session.getAttribute("currentUserid");
		if(!userid.equals(cuid)){
			return mapping.findForward("loginerror");
		}
		//登录成功
		Tuser user = cp.getUserById(userid);
		session.setAttribute("user", user);
		//获得此用户所有岗位
		List<Tposition> listposition = cp.getPositionsByuser2(user);
		session.setAttribute("listposition", listposition);
//							//获得当前用户分配的所有功能
//							List<Tfunction> listfunction = cp.geturl2(userid);
//							//获得公共功能
//							List<Tfunction> listfcomm = cp.findAllCommonFuntions();
//							//结合2个功能集合到一起
//							for(Tfunction f : listfcomm){
//								listfunction.add(f);
//							}
//							//删除重复的
//							List l =Tools.removeDuplicateFunction(listfunction);
//							listfunction = l;
		List<Tfunction> listfunction = cp.findAllFunByUserId(userid);
		//
		String showtypes = request.getParameter("showtypes");
		session.setAttribute("showtypes", showtypes);
		if(null==showtypes || "".equals(showtypes)){
			//首次登陆设置为0，显示系统设置
			showtypes = "0";
			//
//			request.getSession().setAttribute("notShowAny", 1);
			//更换logo用
//			request.getSession().setAttribute("logotype", "0");
		}
//		else{
			//更换logo用
		session.setAttribute("logotype", showtypes);
			//有功能项显示
//			request.getSession().setAttribute("notShowAny", 0);
		//Set<Integer> systemset = new HashSet<Integer>();

		List<Tmoduletype> allmt = (List<Tmoduletype>)session.getAttribute("allmt");
		List resultlistsAll = new ArrayList();
		for(Tmoduletype mt : allmt){
			showtypes = String.valueOf(mt.getFid());

			List<Tfunction> listfs = new ArrayList<Tfunction>();
			for(Tfunction f :listfunction){
				//当某系统下没有功能时，不显示此系统
				//systemset.add(Integer.parseInt(f.getFsystemid()));
				//
				if(showtypes.equals(f.getFsystemid())){
					listfs.add(f);
				}
			}
			//动态显示模块名称
			//session.setAttribute("allmt", cp.findAllmt(systemset));
			//
			List<String> functionModuleid = new ArrayList<String>();
			for(Tfunction fu :listfs){
				functionModuleid.add(fu.getFmoduleid());
			}
			//
			List resultlists = new ArrayList();

			//setfmid 存放有序不重复的模块id(移除掉重复的，开始用的TreeSet尽管去掉重复的了，但顺序乱了)
			List<String> setfmid = new ArrayList<String>();
			for(String fmid : functionModuleid){
				int a = 0;
				for(String sfid : setfmid){
					if(sfid.equals(fmid)){
						a=1;
						break;
					}
				}
				if(a==0){
					setfmid.add(fmid);
				}
			}
			//
			for(String s :setfmid){
				List resultlist = new ArrayList(2);
				List<Tfunction> funclist = new ArrayList<Tfunction>();
				for( Tfunction func : listfs){
					if(s.equals(func.getFmoduleid())){
						funclist.add(func);
					}
				}
				resultlist.add(s);
				resultlist.add(funclist);
				resultlists.add(resultlist);
			}
			//
			resultlistsAll.add(resultlists);
		}
			session.setAttribute("resultlistsAll", resultlistsAll);
//		}

		return mapping.findForward("changeleft");
	}


	public ActionForward sendEmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String userid = request.getParameter("username");
		String email = cp.getEmail(userid);
		if(null == email || "".equals(email) || email.indexOf("@") == -1){
		//没有查询结果，不发送邮件
		}else{
			String to_title  = fc.GetNowTime("")+"邮箱验证码";
			int code = fc.ran(100000, 999999);
			request.getSession().setAttribute("emailcode", String.valueOf(code));
			String to_content = "验证码是:"+ code;
			fc.sendEmail(email, to_title, to_content);
		}
		return null;
	}

}